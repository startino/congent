Meet Meeting 
Mon, Aug 19, 2024

0:00 - Jorge Lewis Oh, I see. Place.

0:01 - Jonas Lindberg Oh, yeah. They have the most per capita, right? But Texas probably has the most. I don't know. Or China. Wait, no. China is in the state. But yeah. Never mind.

0:15 - Jonas Lindberg Between.

0:15 - Jonas Lindberg Did you say China is a continent?

0:21 - Jorge Lewis They're right. Actually, their economy is starting to, they have deflation right now.

0:28 - Jonas Lindberg Wow. Didn't Japan have like mandatory deflation for like a while?

0:34 - Jorge Lewis Yeah, Japan had a big... I think it's still a big issue. Their population is decreasing. Like, how does that happen? That's just...

0:45 - Jonas Lindberg I mean, do you want the explanation? Because I haven't...

0:48 - Jorge Lewis I know the explanation, but it's just like... Do they just watch? Do they make plans for 10 years and then just watch it and don't change?

0:59 - Jonas Lindberg Like, all the politicians, because it's an age of population, all the old people are voting for the people that give old people benefits, and the young people are getting fucked, so they can't get, like, they aren't in a financial

1:14 - Jorge Lewis position to get children. But I mean, like, do they not see that? Like, we're talking about, like, probably at least 100 people plus working on this, on, like, these things.

1:28 - Jonas Lindberg I mean, they aren't getting the votes.

1:31 - Jorge Lewis Interesting. New York City is the highest with the Bay Area, Tokyo, Singapore, London, Los Angeles. Millionaires total.

1:43 - Jorge Lewis Wow.

1:43 - Unidentified Speaker Okay.

1:46 - Jorge Lewis How's Texas not here? I don't know. My mom was like, Oh, Texas is the most millionaires.

1:53 - Jonas Lindberg Yeah. I finally got the motorbike and it's the exact motorbike I've been looking at getting for like two weeks now. So that's nice.

2:05 - Jorge Lewis We haven't checked up on the wise has been sent, but I don't know if you've, I don't know what that is looking like,

2:13 - Jonas Lindberg It's arriving tomorrow, right?

2:15 - Jorge Lewis Um, Tuesday.

2:18 - Jonas Lindberg Oh, okay. Tuesday.

2:19 - Unidentified Speaker Yeah.

2:20 - Jonas Lindberg I mean, yeah, just, uh, it's fine for now. They're the latest internationally.

2:27 - Jorge Lewis Three Texas cities have the most millionaire billionaires among the U.S.

2:32 - Jonas Lindberg cities. On the way back, I had to follow the car which the other guy was driving, and going 90 down the freeway on my first drive was not what I had planned. But the thing is, my phone was in his car, so I didn't have my phone. So I just had to book it after him. Because otherwise, I had no shot of getting home.

3:00 - Jorge Lewis I'd have to somehow find a corner and ask for help. Was it between Central Festival and Maja, or...?

3:07 - Jonas Lindberg It was going from, like, slightly into Old Town to southeast, like way southeast. Oh, okay. Across the bridge and through a bunch of turns and everything. And on the highway, as noted by the 90K. Yeah.

3:27 - Jonas Lindberg That was up in the highest gear and all the way pulled back.

3:33 - Jorge Lewis Does it have a gearbox, at least?

3:35 - Jonas Lindberg Oh yeah, it's a manual. Or, well, it's semi-auto, so no clutch, but gearing and everything.

3:43 - Jorge Lewis Those ones without gearboxes just...

3:46 - Jonas Lindberg Oh, no, it doesn't have a gearbox. I'm just... That's shifting.

3:51 - Jorge Lewis But like, how do the... No, but like...

3:54 - Jorge Lewis How do they make a stone comfortable? Like, surely... The bolt drivers, you mean?

3:58 - Jonas Lindberg They're just shit. Like, they're actual garbage. Like, when I went to the course, they didn't have enough automatics. And I was the last guy in queue, so they just gave me a semi-auto. And I was like, yeah, I wanted to learn this anyway.

4:14 - Jorge Lewis When you're driving, you don't feel the... Like, when I was driving the car, when I was learning how to drive the car, like, if I'd make a sharp turn, you don't feel it when you're driving. Because you've got your hands, like, on the wheel and it's just like, you're in the way of the turn. But, like, when you're in the back seat, everyone's like...

4:33 - Jonas Lindberg Yeah, but the gear shifting, like, the first was like... Especially when I shifted down, I didn't... It had no gearbox, so the RPM just got translated over and it just... Yeah. It didn't go faster, it just kicked at the same speed. And then I slowly but surely learned how to switch gears with it being better.

5:03 - Jonas Lindberg You're muted, I think.

5:10 - Jonas Lindberg Are you talking to the others?

5:26 - Jonas Lindberg Hello?

5:38 - Jonas Lindberg No audio. Can you hear me?

5:40 - Jonas Lindberg Hello, hello?

5:41 - Jonas Lindberg Hello, hello? Yeah, now I can hear you. You just cut out, and then I saw you just...

5:48 - Jonas Lindberg I was trying to...

5:52 - Jorge Lewis For the Ferraris and the Lamborghinis, the gearshifts, they just press a button and it just looks cool.

6:01 - Jonas Lindberg I've gotten pretty good at getting the smoothest of gearshifts now though. It's interesting.

6:11 - Jonas Lindberg Especially shifting down in here. I have to do the perfect braking before shifting.

6:18 - Jorge Lewis it just reminds me of like like it just I don't know it's just so fun for me like all that stuff like doing like lamborghini uh stops and just like or not limousines um breaks and stuff like that or stops or whatever yeah um yeah one thing before we go into the topic is So for some, so like we have the mindset of the longterm with some of these guys, like investing into them, but like, since we're so inexperienced with hiring people and kind of their culture in general, and we didn't go to the university ourselves. So it's like pretty, and we just, we're too young as well. We haven't met enough people their age to kind of understand. Okay, do they have the potential? Like for Chinmay, for example, I can see he has good potential. But for someone like Cas9, like for example, the Primogen, what's his real name? I never said it, never.

7:30 - Jonas Lindberg But it's out there.

7:37 - Jorge Lewis But anyways, that guy, like no one probably thought he was going to be like, oh, the greatest of greats.

7:45 - Jorge Lewis so it's like for okay so for the one I'm speaking about is like someone like b was in house nine for them like how does english get better sorry michael it is michael it is michael yeah he has mentioned it michael or at least someone has mentioned it michael yeah and it's for someone like has nine his english is it needs a lot of work um Like, it's just not something that we can take to clients. Um, like it's, it's conversational, but I feel like we should be, we need people that are fluent, like Chinmay and, and I don't know if Biwas is fluent actually, Will's fluent. Um, but anyways, like there's, there's, it's not, so the language is one thing that of course can be learned. Um, but there's also, Like Nazif, he's become as good as he is in English because he spends time improving it. Hassan doesn't really, he just does things on the internet that are inherently English. But there's some behaviors that, like for example, Chinmay and Nazif, I just know I can work with them because they aren't going to tell me, oh, that's a good idea. Like every single time, like they, they participate in conversations. I had a conversation with, with the whole team on, um, on Adapt and it was just me and Chinmay talking like the whole time. Um, like I like Has9. Um, like, of course we get along well, but it just, I feel like there's going to be maybe, like, I just can't see. If there's potential or not. I'm not saying I can't see potential, I'm saying I can't see if there is.

9:37 - Jonas Lindberg And also, just from a fundamental standpoint, if we're at the stage in our business where we should be investing in people that we're unsure about for the long term.

9:47 - Jorge Lewis Yeah, and it's like, when you, like, I think there's so many people out there that it's like, if you hire another person, like, or I think The objective way to go about it is you should fire him and look for another one, another one out of college or like another young person.

10:14 - Jonas Lindberg Yeah.

10:15 - Jonas Lindberg At the motorbike course, I actually met a software engineer. He's in his like 40s now and he's like started two companies. He had like a lot of insight there. And basically he just said, like when he interviews, like he usually rejects like at least five people before he finds one that he deems like fit. If that makes sense.

10:39 - Unidentified Speaker Yeah.

10:40 - Jonas Lindberg Like that's the minimum.

10:43 - Jorge Lewis I mean, we did quite a few. We did one-way interviews.

10:47 - Jonas Lindberg Yeah, I mean, sorry to elaborate on that, that's bringing them on the team for like, basically like we did, but we accepted every single person. We brought on the team but he just like throws them off the second he sees like okay this isn't it just oh it's not what yeah like for example be worse he's got a great worth ethic and yeah maybe

11:15 - Jorge Lewis like because like think about it like this as well when I first started programming I put try statements everywhere I had no clue what I was like, When you first started, you just like, there's different types of people. There's people that start with like good, you know, foundations like Nazif and perhaps yourself. But for someone like me, where I just, I was just like, I'm just the type to just try everything and just like, just the grind. And then you, and then you get to a point where you're, you've learned things.

11:49 - Jonas Lindberg So, I think he is similar to that, because some of the things he figured out with NixOS and the old tech stack, I did not. I straight up tried it for half an hour, just gave it to him, and then he figured it out. He may have taken more time than I would, but he figured it out. He found weird-ass solutions.

12:13 - Jorge Lewis I just can't remember back when I first started. I told him to evaluate I'm getting a weird echo or something.

12:25 - Unidentified Speaker Okay.

12:27 - Jorge Lewis So I was speaking one, two, three.

12:36 - Jonas Lindberg No, not for me.

12:38 - Jorge Lewis Um, so I told him to evaluate the leads or to improve the, the, the rest system. And I told him when you're comparing the results of a, of an analyzer compared to the actual system, he was using an LLM to compare their yes or no, their Boolean value. And I was like, oh, bro, there's no reason, like you've over-engineered it, there's no reason to use LLMs. And he said, hmm, okay, yeah. But then he came to me again and he brought up the same point, but as he was saying it, he realized that I already suggested for him. So I'm trying to figure out, would I make that same mistake in trying to, over-engineer, perhaps, because when you're naive and inexperienced, you just kind of think, oh, the most fanciest solutions. Perhaps it could go over my head that, oh, there's just a property that we compare Boolean. We think of it as common sense now, but maybe that's just in hindsight. I don't know. So it's tough to say, but at the same time, it's like, we're putting money into him in the hopes that he gets better in the long term.

13:49 - Jonas Lindberg Yeah. And also like when they get better, when we like form them into what we need, they may just up and out.

13:58 - Jorge Lewis Yeah. I mean, as long as there's more potential at Futino than other companies, I think they'll stay, which I think we'd be able to provide with how ambitious we are.

14:10 - Jorge Lewis One attribute of Chinmay that is just very clear is that he has goals. I think you were listening in on the part where he knows he wants to improve in terms of salary and everything.

14:25 - Jonas Lindberg He wants an American California salary.

14:31 - Jorge Lewis I want to tell him in a nice way, unless you go there, you're not going to make that.

14:36 - Jonas Lindberg Yeah. Well, that's why he was looking into starting a business, right?

14:42 - Jorge Lewis But in, I don't know if he wanted to do it in India or in the US, but they all wanted to start a business by the way.

14:49 - Jonas Lindberg You said, well, Chen Mei is the one that's most like looked in. Yeah. And like when he was talking about MBA, I think he wanted to take the MBA for the actual learning, not for the degree.

15:03 - Jorge Lewis Yeah, that's what I got the guy that at the end as well. But I was like, I, we just kind of went into a different topic. But I could hint that, oh, he thinks he needs to learn about business to do business.

15:18 - Jorge Lewis But like, one of the things I can maybe has nine doesn't show that kind of that all the things all the nice things that we see in China, because his English is not a good like, if you're, if you're Second language is not that good, you just speak less of it usually.

15:33 - Jonas Lindberg By the way, I think the reason why he's not good at English, like compared to me, which I also didn't study English like Nasif is doing, is because they speak Hindi, which you can find a tutorial, you can find YouTube videos, you can live on the internet in Hindi. You can't live on the internet in Norwegian. So I was forced to watch everything I watched, entertainment, tutorials, everything in English. They are all watching it. Like I had a discussion with them, both Biwas and Hasnain, they always watch in Hindi. Like if they need a tutorial for something, they always find the Hindi version. I advised Biwas not to, I advised him to watch in English instead to improve his English, but I don't know if he took it to heart.

16:21 - Jorge Lewis Yeah. You know, you know, I was reading back at my messages and see if, and we were talking once. I remember about like how his, um, the way he works is just kind of different from what we like, But I think that's not true. I think maybe it's just the way he expresses himself is, is how he was. Uh, Nazif Nazif.

16:46 - Jonas Lindberg Oh, Nazif. Okay.

16:48 - Jorge Lewis Like I was looking at our WhatsApp chats and, um, And we were talking about, okay, let's do this. And he was like, oh, excited to be part of this new adventure. It's like a dream coming true for me, and I'm very grateful. So I think for him, working, getting a full-time job for a company, or at least like an aspiring, an ambitious company is kind of part of what he likes. I think he's, I wanna ask him some more questions when he gets back. I don't wanna, of course, interview him, but I wanna figure out, like, What do you prefer more to be a freelancer or to have a team that understands you and you can work with both sides?

17:35 - Jonas Lindberg If we were talking about developing, the way we disagreed with his frame of mind was that he wanted to focus on getting just the best at one thing, but we think it's better to explore all the avenues because that makes you better at the one thing. Was there any change of perception from your end there, or is that still the same?

18:08 - Jonas Lindberg Or was it just on the like wanting to be a freelancer compared to wanting to have a full time?

18:13 - Jorge Lewis Yeah, I think I think I confused those two. I probably remembered wrong that the main point was that he wanted to focus on one thing. Whereas when you're in a team, it involves working on all other things, I guess.

18:25 - Jonas Lindberg Not even on the team, just like if you're a developer in general, you should learn everything.

18:31 - Jorge Lewis An employee, yeah.

18:33 - Jonas Lindberg Not like outside of a job, I'd just be learning new shit every two weeks. I'd be learning Rust, I'd be learning SIG, I'd be learning HTMX, I'd be learning, just jumping from thing to thing because when I jump back again, I'll be so much better than if I just focused on that thing.

18:51 - Jorge Lewis Usually good developers are the ones doing everything. They're not really...

18:59 - Jorge Lewis So maybe we could help him open his eyes to that. At some point, we've had our idea or our dreams were like, oh, we're going to be experts at this one thing. Everyone has that. But since we've been forced to try everything else, we've kind of realized, oh, trying everything else helps us become better at that one thing if we wanted to.

19:20 - Jonas Lindberg I'm kind of surprised he's like a fan of the Prime Engine. The Prime Engine is a big advocate of just trying stuff.

19:27 - Jonas Lindberg He made a Doom game on Twitch.

19:30 - Jonas Lindberg Yeah, he's making Doom and... What is it?

19:33 - Jonas Lindberg ASCII.

19:34 - Jonas Lindberg Yeah. But like, he's learning OCaml now. I think he finished learning Rust. He's learning Go now. He's just advocating so much for just trying stuff. Someone even asked him, should I try Vim? And he said, it's not about Vim, it's about trying it. Try Emacs.

19:57 - Jonas Lindberg You just gotta get experience, try everything. Because if you spend one year on VS Code compared to six months VS Code, three months Emacs, three months Vim, you're and you eventually choose VS Code, you're going to be better on VS Code, because you know the fundamentals, you know how to compare servers, you know where it's a live server.

20:19 - Jorge Lewis I didn't actually... I sent a video regarding that Vim. I think it was a video from the Prime Agents saying you use Next for the wrong reasons.

20:27 - Jonas Lindberg Or you use Vim for the wrong reasons. Or don't use Vim for the wrong reasons, yeah.

20:33 - Jorge Lewis I think it's you use Vim for the wrong reasons.

20:37 - Jonas Lindberg Okay, I think the problem is different from the title. Maybe.

20:41 - Jorge Lewis But it was pretty funny because that day or the, yeah, I think it was that day, me and Will were talking about, or I was telling him, people listen to people like the Primagen and don't realize that they're spending more time configuring their Vim setup than writing solutions. And there's so many reasons why people like, the main thing is just, you have to think for yourself and figure out, okay, Should I be using Vim or should I be using VS Code? And I feel like for most people it's VS Code. For most people.

21:13 - Jonas Lindberg Like if you're in... I'd argue VS Code with Vim bindings though. Vim bindings are just amazing.

21:19 - Jorge Lewis No, not Vim bindings. The emulator. Or the... I still haven't gotten it, but... Fabian told me there's like an emulator where it's actually like Vim in VS Code, which gives you the best of both worlds.

21:36 - Jonas Lindberg Not just the Vim plugin?

21:39 - Jorge Lewis No, it's like, it's, I don't know. I think it was something else. I can't remember.

21:44 - Jonas Lindberg So you guys still get like the call on the command line and everything.

21:48 - Jonas Lindberg Yeah. I've heard of it, but that sounds difficult.

21:52 - Jorge Lewis Yeah. The main, my main point was with, with Will was just like, yeah, it's, you can't, why use Linux if like you have to really just think what benefits do you get from it other than looking cool when someone else sees your screen? Cause. Damn, I felt cool when I was in the airport with my Linux, NixOS and my Vim. When I'd be in the co-working space and other people can see my Vim and I'm like, yeah, new Vim by the way.

22:27 - Jonas Lindberg Like for me, I think like the time I've spent with Wynn now, if I moved over to VS Code, I'd be much better at working with VS Code or whatever, Editor, Emacs, like at setting it up to how I like it, knowing what, how it should work to work most efficiently with it, all of that. I feel like it's almost more true the opposite, where I think Will, he literally just copied Primogen's config and used his Vim because Primogen said Vim is good. But Vim is all about being a personal development environment where you decide exactly how it's most efficient to you.

23:05 - Jorge Lewis Will seemed to have a good understanding that Linux is only for certain people. He showed that he had good understanding of that, but there's one point we disagreed on, which I can't remember exactly what.

23:22 - Jorge Lewis But anyways, before we go into the night, let's just kind of dive into the topic, and then we can see where it goes afterwards, just so we can finish that up at least. So yeah, as I said in the Discord message, So ideally, next time or on the third time, we can set up a podcast. So we both set up our cameras or our phone cameras, whatever you want to use, and treat it like a podcast. We can livestream that. And then we post-process it. We can add in some voiceovers, animations, and all that to make it into a concise video.

24:04 - Jorge Lewis But right now, so I've made a day in the life video. Um, it was just ad hoc. It was like, it was midday and I was like, all right, let's just record. And I just kind of recorded the whole day. Um, and I've learned so much and I'm just, that's why I've decided, let's not start with a podcast. Start with this. We'll pretend it's a podcast. Um, or at least, I mean, it's like most podcasts are uploaded, not live stream.

24:37 - Jonas Lindberg So that's the podcast. I'm not live podcast. Live podcasts are very new thing.

24:46 - Jorge Lewis Yeah. But then the, I guess the most, the most of the setup is regarding your, your, your equipment, like your cameras and stuff, but also being in the frame of mind to be able to speak properly. Like if you write that. So right now when I, what I learned is I'm terrible at speaking into a camera. I thought I was good. I thought I was like, Oh, I'm a good speaker. But you put yourself in front of a camera and know that people are going to be watching. You're like, uh, and in your head, you don't sound that bad, but you watch it back and you realize every two words is a filler word. And you're like, wow.

25:20 - Jonas Lindberg Yeah.

25:24 - Jorge Lewis Also. Yeah. I mean, I guess when you're in a podcast, you don't have to look at the camera, but I've realized like just regarding my YouTube channel. Um, I don't have like in this one video that I made the day in the life, I don't have time to edit that. It took me way too long to edit. I recorded it Monday, by the way. I'm going to publish it this Monday. It took me a week to get done with all my other stuff. That's just not the schedule I want. I don't like the stress that it has, but I really enjoy the filmmaking and the cinematic and that part. So what I think I might do is at the start right now, since all I want to do right now is just document, I'll make the similar style videos as I just sent you from Joe. What's his name?

26:11 - Jonas Lindberg Joe, Joe. Wow. Oh, wow. How, how, wow? D-Woz is at your table, by the way. Oh, bruh. What's he saying? I just heard clicking half the time from my microphone went together and so D-Woz, he also waved at me.

26:38 - Jonas Lindberg What would you say?

26:41 - Jorge Lewis So I'd make videos like Joao, where it's just like you maybe write a script for like 10 minutes, 20 minutes, and then you speak off of that. And it's just very minimal, mostly stories, so that when you're speaking, you don't have to do research. And it's just from your experience. It's not opinions. It's just experience. And, um, that way the quality to make, or the effort to make those videos is really low, but you can dish out, you can build a fan base. And later I would, as when I could be able to afford it, I'd hire an editor to edit my videos, but make my own cinematic or kind of, I guess, cinematic films. Cause I want to, I want to have like, like, for example, who I am is, is a video that I would spend probably a couple of months on just as like a passion, just like the, He's trying to join

27:35 - Jonas Lindberg from his personal account.

27:39 - Jorge Lewis But like right now, I just don't have the time to work on it. And I've been at least told probably five times this one week to focus on one thing.

27:53 - Jorge Lewis What do you need?

27:53 - Biwas bhandari Just checking in.

27:59 - Jorge Lewis We're doing a... It's good to see you. Well, good to hear you. No, I haven't seen you for like a month at this point.

28:06 - Biwas bhandari Since, I think, last Thursday.

28:12 - Jorge Lewis Way before that.

28:19 - Jonas Lindberg Since Nexus OS got installed on this computer. I think it's Linux in general because like the research like we did or when troubleshooting it we googled the laptop model and it seems to just be struggling every distro.

28:37 - Jorge Lewis Some wine.

28:42 - Jonas Lindberg Some wine?

28:42 - Unidentified Speaker Okay.

28:45 - Jonas Lindberg Can I make a cocktail?

28:46 - Jorge Lewis Are Just some classic one. Enjoying it with my beautiful classical musician over there. You can hear that?

29:06 - Jonas Lindberg No, I can't, but I've had a keyboard like that. I know the sound it makes.

29:20 - Biwas bhandari Is my mic fixed by the way?

29:22 - Jorge Lewis I went to the- No, we can't hear you.

29:32 - Jonas Lindberg Bye, I got a motorbike now.

29:36 - Jonas Lindberg Finally. The Honda Wave 125i.

29:42 - Jonas Lindberg You know what?

29:44 - Biwas bhandari You're renting or buying it?

29:46 - Jonas Lindberg Renting, and then I'll probably buy it, but I'm also looking at Facebook's marketplace to see if I'll get a better deal.

29:54 - Unidentified Speaker Oh, yeah.

29:56 - Jonas Lindberg Most of them are in Bangkok. The one selling it, it seems like, legit, I'm not joking, probably 20% or like 10% of them are the Honda Wave model, and no one's selling it. Everyone just wants to keep it. It's good.

30:17 - Jonas Lindberg The one I've got now has a whopping 480,000 miles on it, or kilometers. What, how much? 480,000?

30:30 - Jonas Lindberg Bro, it drives like butter still. It's just like the 10,000 one I just tried before, which was double the price.

30:36 - Jorge Lewis How do you get 480,000 in 5 miles?

30:43 - Jonas Lindberg It's like locals. That's the one that they drive to.

30:46 - Biwas bhandari It's like it's running since the sixties. Continuously seven years old.

30:55 - Jorge Lewis Yeah. Oh, yes.

30:58 - Jorge Lewis As your, as your clients, I would expect more updates for my rest, my Read.AI tool.

31:04 - Biwas bhandari I create everything is done and I created the PR because what do you haven't, I think most did yet.

31:13 - Jonas Lindberg Is that how you speak to a client? You ask him to merge your PR requests?

31:20 - Jonas Lindberg I'm still waiting for my manager to merge me.

31:23 - Biwas bhandari I pushed it, but my manager haven't merged it, I think. So it depends on him.

31:35 - Jorge Lewis I applied to the Thiel Fellowship, by the way.

31:38 - Biwas bhandari You applied?

31:39 - Jorge Lewis Yeah, yeah, I usually don't apply. There's a deal with Spencer link to the field fellowship, Peter Thiel, I believe. And I usually don't apply to those grants, because this usually requires like a lot of mentorship, like they want to bring you up and kind of say, Oh, we've raised this guy. But what it looks like on their website, it's just like, we literally just give you money and you like to enable you to go do whatever you want.

32:04 - Jonas Lindberg Apply or like only you and then you got me and it's less, it's less Oh, your name and your email. Uh, you cut out there for the entire explanation. I just heard your name and their email.

32:23 - Jorge Lewis My hair.

32:24 - Jorge Lewis Yeah. You're back.

32:27 - Biwas bhandari Uh, yeah.

32:28 - Biwas bhandari Do you know about building space? And they also do the, uh, yeah, they also do the same kind of thing.

32:36 - Jorge Lewis Yeah. But most, most of the time is those, those things require you to kind of, they, they, they make you do a lot of programs and like mentorship things. And then I just, I'm not interested in that, but it seems like the field fellowship is kind of all about just being, just giving you money to enable you to build a business.

32:57 - Unidentified Speaker Yeah.

32:58 - Biwas bhandari When I was looking at this, um, I don't know. That techcrows do you know about those guys let me see their channel there one one of the audience said that if you are building a startup or something like that uh they gave you yes same like the fellowship program but it's canadian I think Um, if I find that video once again, I'll send it.

33:32 - Unidentified Speaker Yeah.

33:33 - Jonas Lindberg Uh, Jorge, could I get just from a, like 1% to like a hundred percent confidence level of getting a grant here and how much, just so I have any context because yeah.

33:48 - Jonas Lindberg Um, there's an off of the top of your head number. Doesn't have to be accurate. Like seven.

34:01 - Jorge Lewis Because they're, what is it? How did you find it?

34:06 - Biwas bhandari Uh, yeah, I mean, my friend sent it to me.

34:14 - Jorge Lewis Yeah. So they don't have any marketing. It's just word of mouth. And like the people that are getting, that are trying to apply or people like us and his friends. So I think my resume is.

34:28 - Jorge Lewis there's maybe it shows it depends of course what type to invest in whether it's people that have a year or two experience or whether it's people fresh but people over there fresh usually don't take money very well yeah well like how much and what was it seven percent you said it's a hundred thousand grants over two years when you realize Next year that wouldn't be so much to us.

35:03 - Jonas Lindberg I mean, yeah, but the current mouse, that would help.

35:12 - Jorge Lewis In case you didn't know, we're trying to reach 100k this year, by December. So far we're about 40, 41, I think so far. Um, but we have, we have, that's not considering, uh, uh, promise.

35:33 - Jonas Lindberg Oh, okay.

35:34 - Unidentified Speaker Yeah.

35:36 - Biwas bhandari Uh, besides Kuwan and JP, I haven't seen other clients. I mean, I was trying to reach other clients out after only completing these two.

35:49 - Jonas Lindberg Okay, so the biggest or that it was mostly just small clients like the below 1000 Oh, we had one above 1000. That was a Guy with money that doesn't have time. And he doesn't put any time into his website. He just gave us money and told us to make it. And then we made something, delivered it, and has he gotten back to us?

36:23 - Unidentified Speaker Very interesting.

36:25 - Jonas Lindberg Wait, isn't this month that we're supposed to ask for a retainer?

36:34 - Jorge Lewis Next month.

36:37 - Jonas Lindberg Have you been in contact with them at all?

36:40 - Jorge Lewis Yeah, here and there. Not recently, but I think the last time I checked was maybe January.

36:47 - Jonas Lindberg What's your confidence in getting that retainer?

36:51 - Jorge Lewis Pretty high. If you consider that they're the biggest garage company in Hong Kong. How much were they doing a year? I think it was 50 million.

37:03 - Jonas Lindberg I wonder if it'll be more like, ah, I'll support the small fry. Or if it'll be like actually valuing the website, because is he still running advertisements for the old one?

37:17 - Jorge Lewis That was so weird.

37:21 - Jonas Lindberg We made him a whole new modern website, much better than the old one looking. And the week after, we searched up his company and got an advertisement for his old website, not the one we made.

37:37 - Jorge Lewis I think my dad found it.

37:40 - Jorge Lewis My dad searched up Wonderly and the ad came up for their old website and my dad checked it out and was like, you made this?

37:50 - Biwas bhandari And I was like...

37:51 - Jorge Lewis Let me send it to you. Maybe it's still up. Oh no, it's down. It's because we took their domain. But it was like 1990s, like raw HTML.

38:08 - Jorge Lewis Is the old one down?

38:11 - Jorge Lewis Um, I mean, there's, cause we took the, we took the wonderland.com domain.

38:15 - Jonas Lindberg Yeah. Oh, we better not like the, the, the domain name management of that one, by the way, is seven years has paid off it. We'll get no notification, but before it runs out, we have to transfer it.

38:32 - Jorge Lewis Dude, that's a 3d animation. Oh yeah.

38:38 - Jonas Lindberg Oh yeah, go to wonderly.com if you want to see some of our work. You can see all the remnants of our past projects. If you look in projects, you can see itino, startino, wonderly, reditor, oneoffs, oneoffscaptures. Can you see the screen?

38:57 - Biwas bhandari Yeah, yeah.

38:59 - Jonas Lindberg I think it's probably lagging.

39:09 - Jorge Lewis I have to refresh to get the fresh animations.

39:21 - Jonas Lindberg Oh, I remember you made this like, and while you were making it, you were trying to make everything into work with, uh, Lord.

39:44 - Jonas Lindberg I hope that didn't traumatize you too much.

39:49 - Biwas bhandari I brought back some bad memories.

39:53 - Jorge Lewis That was like the most naive thing we could ever think. We were like, dude, let's give us LORC. It stands for Library of Reusable Components.

40:11 - Jorge Lewis I don't need to go any further. We thought we were being like the newest. We thought we were like so innovative.

40:25 - Jonas Lindberg We tried to save every component, everything we made into this like component library that we were planning to use internally in every project we had.

40:40 - Jonas Lindberg So we tried to write all our code reusable.

40:50 - Jorge Lewis At least now I know what it takes to build a reasonable library.

40:57 - Jorge Lewis Just an interesting note on that, over like five projects or so, we'd be able to use all of our code and input it to a code generation system.

41:13 - Jorge Lewis Like it would be really good at, so I mean, actually what I want to try is, been on my bucket list a while, Shed CN code generation thing.

41:23 - Biwas bhandari I mean, that's what I said. No, uh, generative UI.

41:31 - Jorge Lewis No, no, not generative UI. I mean, like, like code, like generative, like it creates the code that makes the UI.

41:39 - Jonas Lindberg Yeah.

41:40 - Jorge Lewis No, no, that, that that's generative UI. That's like in a chat bot, it can create new UI on the spot. I'm talking about like an entire code base. So like backend plus frontend, like everything. Oh, you mean back into, I mean, like the Vercel does it in ShedCN. You know, that's using ShedCN. Yeah.

42:02 - Biwas bhandari Also, I think my one recommendation will be, for example, every time we do a project, we need a signup login compulsory. So we just, why don't we just create a template of that?

42:17 - Jorge Lewis Yeah, we've had that on our to-do list for a little bit, a little while.

42:22 - Jonas Lindberg Let's see if I was supposed to create a template quite some time ago.

42:28 - Biwas bhandari Because every time we do project, we do not need to spend time on those things.

42:32 - Biwas bhandari Yeah.

42:33 - Jorge Lewis Because we've done it already twice for Oak and for Itino. So it is something. So whatever Will is working on right now, those two weeks that he's going to spend on it should realistically be like half a week.

42:54 - Jorge Lewis Anyways, if you don't mind, it's already past bedtime already and I still have to finish this whole thing with Jonas.

43:02 - Jonas Lindberg Oh, what a hard thing.

43:04 - Jonas Lindberg If you read in the chat that I added you in, that's kind of why I added you there, so that you would read the text that was there and get some context.

43:15 - Jorge Lewis But the study joined.

43:22 - Jonas Lindberg I added you because if you read right above, it says, let's pretend it's a podcast so that we can learn. I'll be recording our session. Basically, we were going to be recording the podcast, YouTube video, Ugly Codaskin. Oh.

43:40 - Biwas bhandari Will you upload it? Huh? Yeah. Then I'll also go. It's already 11 here.

43:51 - Jonas Lindberg 11pm. It's 12 here. Jorge, you never answered my question. How sober do I have to be for the podcast?

44:06 - Jorge Lewis Undetectable to a stranger.

44:12 - Jonas Lindberg I've had water in this but I can fill it up with something else.

44:18 - Biwas bhandari I'm gonna go have a good night guys.

44:20 - Jonas Lindberg Have a good night. See you tomorrow.

44:23 - Biwas bhandari Just the mic is peaking but otherwise it's nice.

44:36 - Jonas Lindberg I have this one. Don't worry. It's out of the allowance. What is that?

44:47 - Jorge Lewis I wouldn't care.

44:51 - Jorge Lewis That's a valid purchase. What is it? Well, I can't even read that like it's yeah, it's like Samsung.

45:01 - Jonas Lindberg It's like the it's rum. Basically, it's just rum. Cheaper whiskey.

45:09 - Jonas Lindberg So it's 40%.

45:10 - Jorge Lewis You just have that there or any special occasion or just like, I might as well?

45:15 - Jonas Lindberg It's like, I mean, just straight up, I like the taste of Coke better with some mixed in. But also like some nights we hang out just in the living room here.

45:31 - Unidentified Speaker Yeah.

45:33 - Jorge Lewis I've found a passion for wine yesterday and I was like, I'm in the mood for some wine. I'm glad this wasn't that expensive. It's not! This was like $13.

45:46 - Jonas Lindberg Okay, it's $13 too, which...

45:53 - Jorge Lewis There goes your weekly allowance for food.

46:05 - Jorge Lewis Yeah, that's what I hate though. It's like you're in Thailand and just everything is great. But then you leave and you're like, you just enter depression. And I think there's a term for it like, like, yeah.

46:17 - Jonas Lindberg Like the motorbike I'm renting is like the nice version of it. It's the one, two, five, five. Okay. It's, it's got but they also had another one, which he said was like 10 years old. And I was like, why does it have kilometers? Oh, that's because it's gone to a million and flipped over.

46:45 - Jonas Lindberg But yeah, it's like, I think for the month I paid $2,500.

46:53 - Jorge Lewis Why did you...?

46:56 - Jorge Lewis Because I have no clue what he's saying. Matias, what are you doing? It's 1am.

46:59 - Jonas Lindberg I'm doing the dishes.

47:06 - Jorge Lewis Matias, what are you doing?

47:11 - Jonas Lindberg I think he may have...

47:18 - Jorge Lewis You're just filling cups up and then... Just go sleep. So your brain can develop.

47:36 - Jorge Lewis Yeah.

47:37 - Jorge Lewis All right.

47:41 - Jorge Lewis I'm gonna go ahead and share my screen. So I prepared videos that we can just kind of We can watch.

47:58 - Jonas Lindberg Let me just pour a little bit.

48:07 - Jorge Lewis This not being able to open a YouTube tab is really annoying.

48:28 - Jorge Lewis Let me know if you can hear whatever is being recorded, or whatever is being...

48:41 - Jonas Lindberg No, I can't. How about doing it on Discord instead of Google Meet? You have OBS, right?

48:57 - Jorge Lewis On this, I do. But does it run?

49:01 - Jonas Lindberg Yeah, Thailand's great.

49:24 - Jorge Lewis You sounded like you just got there like a week ago.

49:26 - Jonas Lindberg I'm saying it as a conclusion, like now I've lived here for quite a while, right? Four months.

49:44 - Jorge Lewis Yeah, I was there for like, like 10 weeks.

49:49 - Jonas Lindberg Start of April, then left for two weeks, April. Yeah. So.

49:58 - Jonas Lindberg Yeah, hasn't... Oh yeah, you got out at the right time though, to be honest. Like, it's been quite... Every night it rains, so... You can imagine nightlife isn't that good at the moment. Though I'm not going out often.

50:16 - Jorge Lewis I mean, here it rains pretty often as well.

50:19 - Jonas Lindberg Yeah. I see you have the WetUSDT tab.

50:28 - Jorge Lewis Oh, my Chrome.

50:29 - Unidentified Speaker Yeah.

50:36 - Jonas Lindberg Is it at 0.025 now, or is that from ages ago?

50:42 - Jorge Lewis No clue.

50:50 - Jonas Lindberg How's it going? Oh. Oh. Oh, that's the time.

50:59 - Jorge Lewis It's hit. I checked my Binance accounts, I'm down a K.

51:05 - Jonas Lindberg I'm down like 6 K total I think.

51:09 - Jorge Lewis Cheers to that.

51:10 - Unidentified Speaker Yeah.

51:15 - Jorge Lewis To the moon.

51:19 - Jonas Lindberg The thing is though. Is still going strong, and if this is an ABC pattern, like up, down, up, you know, ABC, then it's, if BTC pops up, I think we're getting the C curve of the ABC, and it should be nice.

51:41 - Jorge Lewis We're relying on this Christmas season to like, this October, November to kind of pop off. If it doesn't, then RIP.

51:49 - Jonas Lindberg Are we, like, according to my friend, which has been saying this since forever, it's going to be like 2025, which is the year it pops up. He said, like, the bear season was coming a bit, like, before it came now. But he's always said 2025 is going to be the year.

52:15 - Jorge Lewis It may be. No.

52:21 - Jorge Lewis Actually, you can watch them.

52:29 - Jorge Lewis Wasn'T… I'm on my laptop.

52:33 - Jorge Lewis I can move to my PC actually.

52:37 - Jonas Lindberg Wow, finished already?

52:40 - Jorge Lewis Way more than half.

52:43 - Jonas Lindberg I mean like the glass.

52:48 - Jorge Lewis I don't, I don't, I don't know why, but I don't like pouring a full glass.

52:52 - Jonas Lindberg I think it's a, I like to feel like you want to swirl it.

52:56 - Jorge Lewis Yeah. Like, no, just when you finish, because if it's a full glass, you finish and you're like, wow, I finished the full glass. But if it's a half glass, you're like, no, I only finished half.

53:04 - Jorge Lewis Yeah.

53:17 - Jorge Lewis This is going to take a while trying to figure out how to put a cork bag. Good night, buddy. That'll do.

53:34 - Jorge Lewis Yeah, I wonder what's going to happen if I go to the US, or if my parents go to the US.

53:41 - Jonas Lindberg Hmm. Yeah. Texas. How expensive is it there?

53:47 - Jorge Lewis Oh, expensive.

53:51 - Jonas Lindberg Can you at least like live with your parents and still do the high-ticket networking?

53:58 - Jorge Lewis Oh, that's the only option. Like I can't live by myself there probably. I guess at some point, that's not a limitation.

54:08 - Jonas Lindberg What about like moving to Chiang Mai?

54:11 - Jorge Lewis Um, it would depend. So let me just turn off all the lights. Um, so they're probably going to decide within like two weeks. Um, So if they do end up going, what I think I'm going to do is stay in Asia until Christmas, and then fly over there for Christmas. And then if we do end up bringing the whole team down to Chiang Mai, then I'll fly back down for that.

54:52 - Jonas Lindberg Yeah, I think most probably I'd join in the house, by the way.

54:57 - Jonas Lindberg Nice.

55:12 - Jonas Lindberg How's sales going? How's what?

55:16 - Jorge Lewis Sales. Pretty bad. I've been trying to handle loads today.

55:21 - Jorge Lewis why it's been the responses haven't been they feel like they haven't been high so I was trying to figure out so one assumption I had was because I was doing comments before as out So even though it makes the account look bad, and potentially all that, it did, I think, get more responses. So I was evaluating that earlier. All right. I am going to connect to my laptop or to my PC. I'm going to use the Russian first.

58:29 - Jonas Lindberg Yo, yo, yo.

58:37 - Jorge Lewis Yo, let me connect my iPod.

59:02 - Unidentified Speaker Hello?

59:02 - Jorge Lewis Yeah. All right, nice.

59:14 - Unidentified Speaker Cool.

59:14 - Jorge Lewis All right, let me go ahead and share my screen.

59:32 - Jorge Lewis I think, yeah. Can you see my screen?

59:38 - Jonas Lindberg Uh, yeah, I can.

59:41 - Jorge Lewis If you can hear anything.

59:46 - Jonas Lindberg No.

59:49 - Unidentified Speaker Bro.

59:51 - Jonas Lindberg Let me see if it's my side Yeah, there's no like the unmute button.

59:55 - Jorge Lewis That's great that I think you need to share the browser not the entire screen I'm sharing the browser But I need to share a tab to share the audio yeah, oh wait, I can just I know what to do

1:00:18 - Jorge Lewis What's the What's the command or what if you change the URL to?

1:00:26 - Jonas Lindberg Question mark of user equals one.

1:00:31 - Jonas Lindberg Don't work for me.

1:00:35 - Jonas Lindberg What's the number? Like if you go to Gmail and change to your personal account, what's the slash you slash number? Change to that number.

1:00:49 - Jorge Lewis Just opens in its own.

1:00:54 - Jorge Lewis Can I just add a tab without a...

1:00:57 - Jonas Lindberg Just try all the offuser equals something until you get one that's correct. You can't have that many.

1:01:14 - Jorge Lewis I just, I don't think it's going to work.

1:01:15 - Unidentified Speaker No.

1:01:18 - Jonas Lindberg Are you signed in with your personal account?

1:01:20 - Jorge Lewis No, not signed in with this one.

1:01:24 - Jonas Lindberg Yeah, but like, uh, go to like Gmail and then add account and add your personal account.

1:01:40 - Jonas Lindberg Click on one, then it should be off user equals one.

1:01:51 - Jorge Lewis I can, I can join from the

1:01:55 - Jorge Lewis the browser with that signed into my personal one.

1:01:58 - Unidentified Speaker Yeah.

1:02:01 - Jonas Lindberg For, if you're using brave, which you should be, you should create two profiles.

1:02:16 - Jonas Lindberg If you're using brave, you should create two brave profiles, one for personal and one for work.

1:02:39 - Jorge Lewis So hopefully what doesn't end up happening is that we just end up watching these whole videos and we don't stop in the middle if, like, we don't stop them.

1:02:50 - Jonas Lindberg That's like the worst thing or what?

1:02:53 - Jorge Lewis Yeah, because the point isn't to watch the videos, it's to discuss the videos. Yeah. Hopefully our creativity does something. All right, I've got them here now.

1:03:16 - Jonas Lindberg I think just one person has to be in charge of when a point starts. So you just play the video and stop when you want to come in something. And then we just discuss that thing.

1:03:27 - Jonas Lindberg And then I can mention something if it's explicitly like something I want to talk about otherwise. Bad code is good.

1:03:40 - Jorge Lewis So this is pretty much the entire statement, I think. Although my title is ugly code is good. So I guess I think bad code is better, but yeah, let's get into it.

1:03:52 - Jonas Lindberg Lately I've been thinking a lot about bad code and how, honestly, it gets a bad rap.

1:04:17 - Speaker 1 I really believe that writing bad code is a critical skill in a great software developer's tool belt. As crazy as that sounds, I hope by the end of this video, you'll think so as well.

1:04:31 - Speaker 1 In case you're new here, let me introduce myself. My name's Troy and I've been writing code now for over 15 years. Throughout that time, I've worked for tons of companies from small early stage startups to huge tech giants like Amazon. Most recently, I co-founded my own startup where I'm the CTO and make all of the engineering hiring decisions. And one of the biggest problems that I see is that engineers aren't writing enough bad code.

1:05:00 - Jorge Lewis So I think that was his the nicest way you could put it that they're moving too slow.

1:05:11 - Jorge Lewis So what is bad code? Generally speaking, you can put bad code in three separate buckets. There's code that's poorly abstracted or tailor-built for one specific use case, the code that is slow or inefficient, and then there's just code that doesn't actually work. To be clear, I'm not trying to say that you should write code that doesn't work, but these first two are valuable tools to have in your tool belt when it makes sense for what you're working on. It's important to remember that when we're writing code, we're writing code for a business, and there's a real why behind the code we're writing. For example, say your business wants a way to send real-time messages back and forth between your customers. So you architect this really nifty solution that lets customers send messages that then go into some queue that automatically get prioritized by a series of customizable functions and then show up in a support queue for the designated department to address. That solution sounds awesome. The only problem is that your company is a soft drink distributor, and even at massive scale, you're only expecting to get 10 to 20 requests a day. So honestly, it would probably be better for you to just build a pretty basic real-time chat app by copying someone's tutorial on Medium. I remember at a previous company having a heated debate with a senior engineer that we had hired from some tech giant. He was pushing back on my suggestion to use a code generation tool called Hasura in our architecture. His argument was that at his previous company, they had used a code generation tool in the past, and when they got to a big enough scale, they had to move off of it, and it cost the company millions of dollars. From his perspective, that makes sense. He joined the company years and years after they started using that code generation tool and only really got to experience the pain from moving off of it. He was missing something, though. The company's decision to use that code generation tool was very likely the reason that they got to the scale that they did. It let them build faster, prove out the product market fit and make changes really quickly. Sure, having to spend a bunch of time rebuilding it sucks. But there's a very real chance that they would have never made it to the scale where that was necessary had they not decided to use it. We ended up moving forward with my suggestion and using Hasura, and the tech stack that I designed there has supported the company well through being valued over a billion dollars. The point I'm getting at here is that when we're developing, we have a ton of tools at our disposal. What's really important is that we pick the right one for our specific business needs. Knowing what tool you should reach for is what can make the difference between a good engineer and an absolute wizard. There's a tightrope that you have to walk between delivering business value and providing high-quality, scalable systems, and admittedly, it's a hard line to walk. I've worked with tons of brilliant people who get it wrong. To close, not every piece of code we write needs to be brilliant. I've written thousands upon thousands of lines of code that weren't well abstracted or super efficient. And most of that code is still being used years and years later. So please, go build an incredibly robust, efficient system when it's warranted. But don't be afraid to write some hacky, bad code when that's what the business needs. By the way, the majority of people watching aren't subscribed, so if you- Yeah, so what'd you think?

1:08:57 - Jonas Lindberg Yeah, he nailed one of the three main points down as abstraction, which I think is where we may be disagreeing, because I do not think abstraction is, like, not abstracting is an issue at all. I think not abstracting is very good code, because then you can jump in at any point, and you can just run through the file, see what it does, compared to if it's very abstracted, you have to get to know the code base very well to be able to work fast in it. But other than that, yeah.

1:09:30 - Unidentified Speaker Yeah.

1:09:32 - Jorge Lewis I mean, he hit pretty much every point. Um, and you know, like we probably, we agree with most of what he said because his background is very similar. Well, other than the part where he worked at big companies, but he started his own startup and in startups, this, this whole bit is super important where if you're just moving too slow, the code that is good code, then you're not going to make it.

1:09:58 - Jonas Lindberg Yeah, it's also interesting that with Amazon being the big company is worked at, that means like for Amazon It's a tech giant, but their logistics lie in not specifically tech, if that makes sense, compared to Netflix, Google, like all of those live completely online. Amazon lives in real life and on text. I heard it quite like...

1:10:31 - Jorge Lewis Amazon has more logistics, but...

1:10:35 - Jorge Lewis You're like, this is a good example or at least just every example where it's just like, yeah, you, there's no, you have to understand the needs to, to figure out what, and the need is, is a, is part of understanding the vision and mission of, of the whole product or the whole project. If you don't understand that you're building for a hundred users and you're, you're trying to build a platform that scales for 10,000, like there's just something totally off. And I've got into this so many times with the team recently. Like, for example, for the milestones, the simplest way to do it is for every time the user inputs new tracking data, we're going to pull the list of milestones, all the milestones, we're going to pull the history of of the checking data, and we're going to do a couple things. Every time we get new tracking data, we're going to calculate the sum of that new tracking data. We're going to compare it to all of the milestones. Does it compare to all of them? In terms of efficiency, that is the Least efficient way like there's no I mean you could on purpose make it more less efficient But like just the default that's the default like you just pull everything you get everything and you can just compare it one by one That's the slowest way you could do it, but that is good enough like on the server side comparing what is it like 500 rows per user maybe two times three times a day isn't like you just have to compare put in richest in how relative it is to the project of the project like I don't know it's like how good do we have to make this code not good at all like I mean the what has nine actually started with was using an AI agent to compare the milestones that was kind of the code looked quite nice because it was all a prompt but the the simplest way is to just use if else statements if this is if the sum is greater than this or if the streak is greater than this so it's like the best code like the best way you could architect it would probably be I don't know storing some sort of values in a cache throughout the day or Like, there's different architectures you can apply to make this more efficient. Like, undoubtedly, but

1:13:08 - Jonas Lindberg To add on to that with, like, I remember before when we were building up the graphs and everything, getting the engineers on, we're storing all the events and all the messages just in the database. They want to optimize it. To instead store it in a cache and then upload to the database, not every single call, not having to get from the database every single time you open the application. But that's trying to optimize performance and trying to optimize database usage for all our total of zero users currently, which like, It's not where we should be. It's not what we need to be working on. Also, one of them suggested we should be backing up our servers. We have no valuable data on our servers. It's just kind of like the video by Code Statics, the triangle of velocity, Optimization and I have those videos queued up by the way.

1:14:16 - Jorge Lewis I have premature optimization queued up.

1:14:18 - Unidentified Speaker Okay. Yeah. Yeah.

1:14:19 - Jonas Lindberg But basically just know what to work out with on at which point, what is important to get down at which point and yeah. Yeah.

1:14:31 - Jorge Lewis It's interesting. I think our points so far have been not bad code, but more so Like so far, all we've mentioned is design or I guess planning or.

1:14:54 - Jonas Lindberg Yeah. I think it comes down to when you're working on an application, you need to think about like, what is the number one thing that needs to be done right now? Not what is something that could be nicer hair? Like what is the number one thing that's required from this feature? What's the number one thing?

1:15:15 - Jorge Lewis So one thing though, for Arrest for example, I've taken a look at that codebase and the whole superbase thing. It is terrible. It needs to be reworked. I'm trying to go into that codebase and change some things but it's just so tough because everything is so badly made. It was made in two days.

1:15:43 - Jorge Lewis There's, I guess, I don't know, it's like, there's also that side where it's just like, at some point, if you make code that's, or you design your, your, your code base, that's like made to last a week. I don't, I have to, and that's the code, that's the whole term code that, or tech debt, where it's like after a month, you have to refactor or not refactor, but you have to re kind of redesign, I guess.

1:16:15 - Jonas Lindberg Yeah, rest is a smaller project, like in everything, so I don't know how accurately it applies, but... Your need to optimize it comes from it being, it working and it being out there so fast. Like you got it working and up there and got us clients through the application within two days. If you spent two weeks making it perfect, I don't think it would be as efficient at doing the thing it was like number one thing it was supposed to do, if that makes sense.

1:16:49 - Jorge Lewis Exactly. Like, and recreating it from scratch is not as much work. Like, so we're looking at two scenarios. The first scenario is you make it perfect the first time. The second scenario is you make it fast in two days and then you make it again for a week. I think the duration making it perfect the first time is longer than where you make it two times. It's the same with the, it's the idea with the pottery, the, the research or the study behind the pottery thing. Where it's like, if you make a lot of them, you'll get good at making pottery. If you make one perfect pottery, you're not going to get that good.

1:17:24 - Unidentified Speaker Yeah.

1:17:25 - Jonas Lindberg Also taking the example in the video, the support ticket system. You can make the simple one, just customer sends a chat to support. Once that's in place, which takes super fast, it's much easier to recreate it and create the more advanced one when needed. It, then it would be to like create the more advanced one immediately because then you understand the needs, then you understand all the requirements, then you also haven't invested much time into it. And the time you have invested into it is a very simple piece of achieving this one mission.

1:18:06 - Jorge Lewis Yeah. One question I have is like, did Netflix design was their first, like when they, when they had their first, let's say 10 was that version of the code base scalable? Was that, could that handle hundred 10,000, thousand users?

1:18:27 - Jonas Lindberg No, no way. That's what the primogen has been working on. He made Falcor, which I don't know if you've heard him talk about Falcor, but I think it's the media codec relay thing that they used to send they send so much data out to users now, but like everything has to be scaled using microservices. It's definitely something that's been modified time and time again, and it's probably still constantly being optimized.

1:19:00 - Jorge Lewis Yeah. Cause it's just like, like for example, the milestone thing, if we made the most efficient thing for what, like we're saving $10 over a year.

1:19:13 - Jorge Lewis for like super base calls, or we're saving, you know, like 50 milliseconds every day. I don't know. It's just, you really have to, it comes down to understanding what you need, not what you want, not what's sexy. It's like, what would be sexy is if we had the fastest thing. What was what Maiden?

1:19:34 - Jorge Lewis Facebook.

1:19:36 - Jorge Lewis PHP.

1:19:38 - Jorge Lewis I think they went through a process of going from PHP to, they made like their own compiler, their own like subscript of a PHP or something.

1:19:54 - Jorge Lewis Now, I mean, now I have no clue, but

1:19:58 - Jonas Lindberg I think they're using OCaml now pretty heavily at Facebook. And that's like a nitty-gritty functional programming language. And I think they went into the nitty-gritty functional fancy-schmancy perfect language way after the platform took off.

1:20:19 - Jorge Lewis Yeah, but it's like those are...

1:20:23 - Jorge Lewis those are some really big scale projects where it's, it's very easy to take examples out of like, Oh, what was Facebook built off PHP? Okay, cool. So let's use what we know. I think everyone kind of understands, Oh, let's use what we know. Like, or I feel like that's easy to say, like we right now I'm good at Python, so I'm going to use Python and, and whatever front end I can use. But I feel like the bigger thing we should be going into is, is the more does Hmm.

1:20:56 - Jorge Lewis Cause picking what you know is important, but like there's, there's also like a balance, like for example, so, so let's, um, let's go, there's two, there's a couple more videos. So let's go through one, one more and then see, and then just go from there.

1:21:12 - Unidentified Speaker Yeah.

1:21:16 - Jorge Lewis Um, okay. This one I quite liked. Let me share.

1:21:32 - Speaker 4 In Canada, I was doing a project for a big communication company. This guy, we used to ride share and he'd come round and beep the horn and pick me up and it was like minus 30 outside. So I'd slide my way towards the car and every morning he was talking about functions. What do you think about that?

1:21:49 - Jonas Lindberg Well, I think it depends on what stage you're in your business, what stage you are in. Like with Facebook, the OCaml is the beautiful functional programming language that he's mentioning. And that's because they need that artistic perfection at the moment with like the, but you don't need that one starting.

1:22:40 - Jorge Lewis But do there, They switched to OCaml not because it was beautiful, but because it was functional, like because it served its purpose.

1:22:50 - Jonas Lindberg Of course. Yeah. I mean, that's the beauty in it, how perfectly it serves its purpose. That's at least one. Yeah.

1:23:00 - Jorge Lewis If I'm not mistaken, it's about to get into what I'm about to say, which is the like i've never thought about my code in terms of the code but just what it does like at the end like if I can do this like that's the beautiful part like the output these books like clean code and pragmatic programmer these these are very controversial there's actually a video I think I'm gonna look for it right now but while we're watching

1:23:25 - Jorge Lewis this there's The I'm gonna teach you how to create code that is clean or beautiful Which really means that it's easy to read. It's easy to maintain So there is some functional advantage to doing that but I just think a lot of people just get lost in the code and lose touch of what the point of the code is and exactly what

1:23:49 - Jorge Lewis we need to enforce within our company.

1:23:52 - Jonas Lindberg I think much more valuable books are like programming patterns, for example, learning how dependency injection works, learning what inheritance is, should you use it, when should you not use it, like learning all the patterns, not the ways to make it more readable.

1:24:11 - Jorge Lewis I mean, I've never actually read those books, but there was one video I mean, I'm looking for it, but I'll find overtime. I mean, it's just like, if you get lost in the code, it's very nice to see that you love what you do. But if you're spend, like, spend your, your, you know, your over out your extra time or doing that not not the time I pay you.

1:24:54 - Jorge Lewis Did bro get hacked? Yeah, he did. Me? Who? No, Asim.

1:25:01 - Jonas Lindberg Oh.

1:25:02 - Jonas Lindberg Yeah.

1:25:03 - Unidentified Speaker RIP.

1:25:10 - Unidentified Speaker RIP.

1:25:17 - Jonas Lindberg He posted on our server too. Yeah, I see that.

1:25:24 - Jorge Lewis Okay, you're ready.

1:25:26 - Unidentified Speaker Yeah.

1:25:28 - Jonas Lindberg I'll just kick him from the server. You can add him back when he's… Feels so bad. Rift my guy.

1:25:49 - Jorge Lewis Like you said, getting lost in the code, I'm not forgetting I get lost in the code. Sometimes I'm like, oh, this needs to be perfect. But I have time to lose. The extra four hours between 8 and 12 that I spend on it is to no one else's demise, but to mine. It's just because I want to finish that today, and no one else is paying for it. It's not like you're getting employed to do it.

1:26:13 - Jonas Lindberg Like I'm perfecting this because I find, I find a lot of joy in myself perfecting stuff, like going into stuff that isn't immediately useful because that's what's made me the programmer I am today. Like it's, I just like, it's more so the learning experience from perspective than perfecting it and figuring out how it works entirely. Not just to figure out that thing, but just to increase my knowledge overall, that that's the value.

1:26:51 - Jorge Lewis Yeah.

1:26:54 - Speaker 4 One way you can figure out if you're lost in the code yourself is to ask the question of, if I can automate all the coding and make it so that, I don't know, you just dictate through some sort of AI chatbot the requirements very specifically, but in natural English, and it just generated all the code for you, would you see that as a good thing or a bad thing. And I think from my perspective, surely it's a good thing. It's like how today, rather than spending days creating some kind of intricate photorealistic image, you can just type your prompt into Adobe Firefly or Mid Journey and it will create you an amazing looking image in 10 seconds. Surely that's a good thing, because If I can create software that fulfills some requirement in 10 seconds rather than 10 hours, then that's 10 hours of my time that I get back to potentially do more productive tasks. Because ultimately, code is just a tool to achieve some sort of outcome, to do some calculation or present something to the user in a certain way.

1:27:55 - Jorge Lewis Do you think that's how people like Hasnain, BOS, and Shinmay think of it? Do you think they think it's a tool to reach the outcome?

1:28:04 - Jonas Lindberg I'm not quite sure, but for me, usually the coding part is never the issue, especially in the tech stack we're working in. The coding has only ever been an issue when I'm learning something new, and that's how that works. It's all just a bit business and state management, or like the business logic and state management, coding that in properly, which if I was prompting an LLM, I'd also have to explain it properly. Code is just a language to express the business logic and the state management.

1:28:46 - Jonas Lindberg It's not the thing I'm trying to make beautiful. I'm just expressing myself in it, if that makes sense. Making that code beautiful or in the best optimized way possible has never been the issue. If I go into like some way like how to do this in JavaScript, that's to learn for myself so that I know in the future and can do it faster. It's not for any specific task ever. It's not to make any specific piece of code beautiful.

1:29:25 - Jorge Lewis That's what companies care about. And that's definitely what users care about. They don't care how beautiful your code is or whether you're using a functional or imperative programming language. I mean, the way that this guy in Canada was talking about our functional code was like, he'd just been on a first date or something. And now that I've...

1:29:45 - Jorge Lewis Did he start focusing around?

1:29:47 - Jonas Lindberg He'd just been on a first date or something.

1:29:53 - Jorge Lewis I don't know, is it?

1:29:55 - Jonas Lindberg Yeah, it is.

1:29:57 - Jorge Lewis Is it 1S?

1:29:58 - Jorge Lewis And now that I've started building my own projects, like I built this thumbnail tool for YouTubers, and I'm having to realize that users don't care about my code, and there's a very good likelihood that the tool that I create, it's not going to be that useful that people are actually going to start using it depending on how good I market the tool, but if there's such a good likelihood that nobody's going to use it, then it's better to get the tool out there as quickly as possible without obsessing over the code quality, the test coverage, because until you get your software in front of the We've never we haven't done a single unit test in our at all

1:30:33 - Jonas Lindberg like Because it's you'd spend all this time making the video and The the thing that matters most if someone clicks on it and starts watching it is the thumbnail, which is the thing I'd probably want to spend the most time optimizing, if that makes sense. Like, I don't want to spend 18 hours making a video just to have an LLM generated shitty thumbnail that no one will click on, or few people will click on. That's like the eye catcher that needs to be optimized, right?

1:31:13 - Jorge Lewis this is you know that guy we met in um in the in the um the hoop what is it the shisha place um adam he he does like the you don't randomly like the automated youtube videos I'm guessing that's

1:31:29 - Jonas Lindberg what it's for oh yeah yeah lies the users don't care about my code code, and there's a very good likelihood that the tool that I create, it's not going to be that useful that people are actually going to start using it, depending on how good I market the tool. But if there's such a good likelihood that nobody's going to use it, then it's better to get the tool out there as quickly as possible.

1:31:57 - Jorge Lewis This guy needs to work on his... I've noticed this because I do this a lot. He adds a lot of cuts in the middle of his speaking, which is what you'd need to do when you don't plan what you're going to say, or you use a lot of filler words.

1:32:13 - Speaker 4 Well, without obsessing over the code quality, the test coverage, because until you get your software in front of the eyes of users, you don't know whether it's actually solving a problem that they have. You don't know whether that software is going to go anywhere by obsessing over code.

1:32:28 - Jorge Lewis Yeah, I didn't realize it until I said, without even saying something between. Maybe it's automated.

1:32:40 - Jonas Lindberg It's very, oh yeah.

1:32:44 - Jorge Lewis Cause there's been like, I didn't realize it was that many.

1:32:47 - Jonas Lindberg I think it cuts forward to him saying, ah, and then kind of get into him speaking.

1:32:52 - Unidentified Speaker Maybe.

1:32:53 - Jorge Lewis You're procrastinating by doing something that's easy for you, which is polishing code endlessly, writing more and more tests until you feel completely satisfied rather than doing the hard thing, which is actually push that code to production, try to find

1:33:08 - Jorge Lewis I'm so glad our developers aren't experienced enough to even know what a unit test is. Like I'm so glad that I have not seen them make a single unit test. I don't know. Like there's the, there's the

1:33:22 - Jonas Lindberg Unit tests are only useful if you have a very specific algorithm or something that you need to code for your specific business, and you need to test that that's working correctly. All our code is just something to do with the front end or directly interacting with database or AI, which is completely unpredictable. We never have code, which is running some calculation on like some person's account. Like that's something you test, like calculate this guy.

1:33:53 - Jorge Lewis We're only dealing with strings. Yeah. And the strings, there's no, there's no like extreme values.

1:33:59 - Jonas Lindberg There's just like, And extremely long string is extremely useful for applications where you have logic that's consistent. We don't have any logic that's consistent except for database interactions, which would be integration tests, not unit tests and just front end stuff, which doesn't need to be tested ever.

1:34:22 - Jorge Lewis So integration test is something that we should take a look at sometime soon.

1:34:32 - Jonas Lindberg integration tests are mostly useless and give you a false sense of security because what integration tests really do is make you put into code your perception of how the world works, not how it actually works. And then you're testing it against your perception of how a database works, not how an actual database works, if that makes sense. So you're always testing it against what you expect, not what you don't expect, which is what unit tests are better for.

1:35:09 - Jorge Lewis There's always a range of things that you could test for, and I guess when you test for those, that should be sufficient. If there was a way to test everything to 100% accuracy, this wouldn't even be a discussion. So I guess it's just a matter of, I hate this, but everything's a balance.

1:35:35 - Jonas Lindberg Yeah, I feel like most of our stuff is just a super basic wake call, like, get this table. Our stuff doesn't need any.

1:35:48 - Jorge Lewis It returns two things, data and error. If it has an error, you treat that error but if it doesn't then it's good.

1:35:54 - Jonas Lindberg A place to use an integration test is like if you have like an edge function and you want to make sure the edge function is returning the correct thing from your input. Yeah. Not if you just want to upload the thing to the db and for thread.

1:36:08 - Jorge Lewis Yeah our programming is so simple really like it's just it's it's just very basic programming but we need to do it very like which makes it that if we do a bad job, it's pretty obvious. Like if we use three, four loops in a loop, that's like our really, really, that's our only code. Like we don't have much code really like,

1:36:32 - Jonas Lindberg Oh, three.

1:36:35 - Unidentified Speaker Sorry.

1:36:36 - Jonas Lindberg Oh, three. Oh, three. No.

1:36:47 - Jorge Lewis Bro, I've never, I didn't study computer science, why would I? I did a competitive program, I should know.

1:36:59 - Jorge Lewis Actually, I wouldn't. My programs were always log n.

1:37:06 - Jonas Lindberg Wow.

1:37:06 - Unidentified Speaker Sorry.

1:37:07 - Jorge Lewis Log n?

1:37:09 - Jorge Lewis No, but like, our code base is so simple. It's like, if you really take a look at it, there's there's not much code, like there's no, like there's no, nothing needs to scale, nothing like, I don't know.

1:37:34 - Jorge Lewis Yeah.

1:37:37 - Speaker 4 That software and face the reality of whether what you've created is part of Steaming Turd or actually it's the seed of an idea that could go somewhere. I have been the person that's been polishing code for a lot of my career. I kind of became obsessive.

1:37:56 - Jorge Lewis Now that I mentioned it, he just has so many cuts. Like I can't stop seeing them now.

1:38:02 - Jonas Lindberg Test coverage, clean code principles, naming and all these things are really important if you're working on a code base which is going to be used by like hundreds or thousands of developers. But there was this one time I was leading a particular project and all the times that my boss was telling me that we really need to speed this along and I was polishing the code endlessly like the software was somehow An extension of me and if I didn't make it good, then I wouldn't be good. But now I see that boss's perspective and kind of wish that I'd said to him, Hey, we're going to push something out the door and it's, it's not going to be great, but we'll see whether this feature is actually something that's going to be useful to the customers or not. And in some way, beginners have a big advantage here because they don't even know that clean code is a thing, but they don't know the methods that are hundreds.

1:38:54 - Jorge Lewis That's actually a good point. He was shipped his code like super fast because he used tried catch everywhere. But that's a point I want to touch on later. I actually have a talking point. I have two talking points. One of them is how the experience and skill of a programmer affects the whole statement of ugly code.

1:39:16 - Speaker 4 Lines long are necessarily less readable. Beginners are just focused on getting their web page or application to work.

1:39:25 - Jorge Lewis I guess that's one of the benefits. That sounded very nice actually. A junior developer, all they're trying to do is to get it to work. And that's all you're trying to do in a business world. You need it to work. You need it to accomplish what it needs to do. That's it.

1:39:54 - Jonas Lindberg I feel like you're right, but the problem is juniors don't know what is needed. They usually have the wrong perception of what is needed to make it work and end up working on things that are not relevant.

1:40:11 - Jorge Lewis Yeah. For them, what's needed is just whatever's in their head and it works great if it's their portfolio website, but yeah.

1:40:19 - Speaker 4 that are hundreds of lines long aren't necessarily less readable. Beginners are just focused on getting their web page or application to work. Once you've been in the software development industry, especially if you've been working for larger companies, you get this mentality that...

1:40:37 - Jorge Lewis Why was there an electric scooter?

1:40:39 - Jorge Lewis Industry, especially if you've been working for a large...

1:40:42 - Jorge Lewis What?

1:40:43 - Jonas Lindberg Oh no, it's not electric. That's not electric. That's just...

1:40:52 - Jonas Lindberg It's kind of a given that you're gonna make the solution. What's the next challenge? You can do it's make this solution work plus make it as polished as you possibly can and Hopefully later down the line when people talk about that project, they'll be like that code man.

1:41:10 - Jonas Lindberg That was something else I As you know I think in my previous company I was like working for large part converting a legacy code old 20 into from Visual Basic to new C sharp laser amazing everything you know yeah that code base was something else yeah There were comments in both English and Norwegian, and most of them weren't explaining why anything was done. It was just like, this line does this. Thank you. Yeah, I could read that, but why?

1:41:54 - Jorge Lewis Comments is a whole topic of itself.

1:41:58 - Unidentified Speaker Yeah.

1:42:01 - Jorge Lewis He brings a good point that I think about it. No one gets praised for good code. When have you gotten praised for good code?

1:42:12 - Jonas Lindberg The thing is, I think if I code good code, if I learn how to code good code, just to play devil's advocate, what happens is the next time I'm coding something similar or like what I learned from that, I can apply to a lot of scenarios and therefore move faster. I can move faster than B was has name, whatever, is because I have just like gone into the deep dive on so many topics that I know where I should prioritize my time where I shouldn't. And I already know, like conceptually, how I should be structuring things and where I should be putting my focus, where And I know the implementation techniques fully. So all I'm thinking about is the business logic and like, yeah, just states. I'm not thinking about implementation details at all.

1:43:04 - Jorge Lewis Yeah. And that's exactly where my statement of how the experience of a programmer affects the whole statement. Cause if you're building code, that's just like just terrible. It could either be because you're trying to do it fast or it's because you don't know better. And if it's because you don't know better, then you have to be like, okay, if I don't know better, is the better solution, so for example, the try-catch.

1:43:34 - Jorge Lewis Why do senior engineers tell juniors not to use a try-catch statement? If at the end of the day, it makes the code ship faster.

1:43:48 - Jorge Lewis Because in the long term they'll become a better fast-removing developer if they don't try catch Yeah, I when when he Like when I removed his try catches, it's not like I removed them and that's it. I had to I had to catch the error somewhere but there's a proper way to catch the errors that not only allows you to move faster in the future, but that's also more, like it's just more efficient in the longterm. It's easier to read for developers. There's like, I don't want to go into the specifics of like, Oh, when you use proper error catching and typing, you can, you know, blah, blah, blah. Like that, that part's obvious, but I feel like I'm trying to apply a general statement where it's like, if you learn, and it's exactly what he said, if you learn the best practices and kind of, how to make better code, you apply that in the future to be faster. It's similar with, if you learn how to properly catch an error from Superbase, you'll have to learn it once and you can apply it every single time.

1:44:49 - Jonas Lindberg I think where the problem comes in is when you're trying to put glazing on a cape, which you're only making once. If you're improving codes on a code base, that's totally irrelevant to every other project. It's like a piece of code you're only ever going to code on this project. And the thing you're optimizing and making pretty is something that's something How should I put it? That won't translate moving forwards. That's when it's a problem. That's when it's not worth it. But if it's a problem like you don't know how to handle errors in TypeScript, then you should learn how to handle errors in TypeScript because it's just a thing you know, and when you know it, you know it. But if it's like, you have this function and this function could be translated into a class, which could be used as a factory hair and hair and hair. That's not useful because that's just translating it into something you think is prettier. You already know how to implement both patterns and everything, but it's not useful. It doesn't speed you up. It doesn't teach you anything for the long term.

1:46:01 - Jorge Lewis It's only like, I wonder how different our perspective on programming is. Compared to people that went to computer science that took degrees because from what I know is they learn a lot of theory and they learn some practical stuff like they might learn some C++ to learn an algorithm. They do algorithms in their own code, maybe just JavaScript. They learn things like classes and inheritance all through theory. I learned that stuff in my code. So it's just, I'm, I feel like we're so out of sync with these guys, like with the general population of programmers where they learn things the formal way. So maybe it's just tough to see, see it from their eyes and

1:46:55 - Jonas Lindberg I think, like, because they've learned it from theory, they could go, hey, this file, the functions in this file should be part of a class, they shouldn't be functions. Meanwhile, like, an actual problem that they should be focusing on takes is, I don't know how to handle errors. Let's learn how to handle errors. That's just like a straight up objectively better thing like that's going to help you long term and that you're always going to apply compared to an opinion piece on what's theoretically better.

1:47:27 - Jorge Lewis Yeah, like, for example, for me, I've I, I don't remember learning classes. The only way the only reason I know classes is because I know of the concept of what a class is, which is it's just groups, properties, and functions together. And it's just a more compact way. I don't know. I'm just getting back to my point of I'm trying to view the code how they see it, which is so rigid. It has to be this way.

1:48:08 - Jonas Lindberg Not even it has to be this way, just I think it would be a better practice to do it this way, even though the other way already works and is in place and everyone understands it. I think it would be better practice if we put this AI file, made it a class, added the properties here that we actually just store in states for now, like just converting a thing that works into another thing that works, that they deem as prettier.

1:48:50 - Jorge Lewis It also goes down, like going down that rabbit hole, it's just like, The prettiest thing is what everybody understands the most.

1:49:03 - Jorge Lewis Like if everybody understands, like if your company or if you're like, usually for us, at least for small agencies, there's a style that people use or that the company uses. And for us, we have our style. We can't, we maybe can't define it in words, but we do definitely have it. And if we just keep that style consistent, that's the most efficient way to go.

1:49:26 - Jonas Lindberg Yeah, that's the whole argument for why formatters and keeping code style is important because formatters allow coders to code in any style they prefer. But when it's formatted, the look will be consistent. As you scroll through files, your eyes will be better trained to catch and interpret what's on your screen.

1:49:49 - Jorge Lewis Yeah. So I mentioned this earlier, but I couldn't pin it down. But what we should be focusing on here is not, I think, the code aspect because, or at least for us, have you had a developer trying to make their code perfect when programming? For me, I've only noticed that when design, like architecting a solution, designing a solution.

1:50:22 - Jonas Lindberg For me, I've only noticed that when I already have the solution and I'm like, but these two functions could be one function and the parameter that I'm passing in here could be a property.

1:50:36 - Jorge Lewis No, no, exactly. Like that's what I do as well. Like for the rest thing, everything was like its own thing. And at the end of it, I was like, Oh, let's just make this a class. It was just, it was done within five minutes.

1:50:49 - Jorge Lewis So, so I do clean up my code. I don't like, it's just.

1:50:56 - Jorge Lewis It's so, the whole topic is so...

1:51:00 - Jonas Lindberg I think the problem is when you're trying to make the clean code first, like you afterwards saw, oh, this can be a class and then made it a class. If you're before that trying to plan, okay, this should be a class because I have properties. That's when the problem comes in because then you're taking a long time thinking about how it should be structured and so just implementing it and then formulating it afterwards.

1:51:24 - Jorge Lewis Yeah. And I could see university students going down that road because they learned, Oh, we need classes to make code. We need to make our code, our code using classes. So first let's start with what classes we need. But rather if you start from a functional first standpoint, it's like, what do we need? Okay. We're going to need this ID. We're going to need this, this, uh, post title, et cetera.

1:51:49 - Jonas Lindberg Should you even switch from classes or from functions to classes?

1:51:57 - Jonas Lindberg I don't think in any of our, like even Adapt, I don't think we have a single class. And classes are like kind of this dumb. I think structs are the ones that are being loved more so now, just like having proper objects. But all of that just comes down to opinion pieces, as I mentioned, like how you structure it shouldn't be the important thing.

1:52:24 - Jorge Lewis Yeah, it's just I feel like it's just every time you speak, it's getting into this one point of how experience does matter. Because if we told our junior developers to ship code as fast as possible, every single time, they would never learn how to handle errors. Yeah, it's like So it's that and that's what my life my whole programming journey has been it's been to ship as fast as possible because From making video games. I don't care about how good or how pretty my code is like never like So, but at what point did I learn?

1:53:00 - Jonas Lindberg Okay, I should be air checking and I I I think you kind of, I mean, like, just after having experience and having the goals set by yourself, while when you're creating five prior catches, you kind of realize, hmm, this can just error and I don't know what will happen. What will save me time in the long term and will be a thing that I just have to learn once that is how to handle layers properly so I don't suffer down the road and so I don't like or so that I just work more efficiently in general. So then we just look up the documentation. It's like the same with ShedCN. If like when we started with ShedCN, we wanted to make a landing page, The fastest way we could do it is just do it tailwind, draw tailwind, just YOLO. But we know that like, hey, ShadCN is going to be the thing we're going to be using. It's going to be helping us. It's going to be keeping things properly consistent with UI and everything. The benefits are worth it. And it's a thing to just learn once, then we apply it. That's when clean code does matter, if that makes sense. But that's not clean, that's making it readable. No, that's not making it readable, that's actually practical. Same with the error handling, that's not making it readable, that's the practical difference.

1:54:33 - Jorge Lewis It's a practical difference, but in the code it's...

1:54:43 - Jorge Lewis So who... So this statement, I came up with a statement because I, I guess I assumed it's the common notion. So I was, of course, when you, when you think of titles, you think you're trying to think of something, uh, like with, with, uh, conflict, I guess. So, which means that the Going with the grain would mean that making your code look pretty is, is the best way to go. But I don't think that's, that's how it is in the world. I think it's.

1:55:13 - Jonas Lindberg I think the term people use is clean because it's not about making it pretty, it's about keeping it readable and clean.

1:55:23 - Jorge Lewis But that's not like a big issue in this.

1:55:34 - Jorge Lewis Making it readable is not an issue because we have formatters and we have Like for me, the issue is people over engineering solutions or or designing solutions that just aren't what we need over engineering. So.

1:56:04 - Jonas Lindberg be like, that code man, that was something else. But what really matters was the outcome of the project and the users that you served. And hey, if you can serve those users just as well with a monolithic application rather than a microservices architecture, then why the hell not? So the This is just a reminder to remember why you're writing code. Is it because you really love code or is it because you want to create something that code allows you to? Maybe once you figure that out, you'll do like I'm trying to do and not spend so long obsessing over the tiny details that aren't actually important.

1:56:38 - Jonas Lindberg The last part is actually pretty interesting because I feel like my adventure with coding was I want to create games, so I'm going to learn how to code to make this thing for my game. Then I really liked the coding, so I coded more things for the game. And then, like, as I got into coding and started loving coding more than creating the thing, I got into, like, other parts of coding which are more technical, less visual, like CLI tools, whatever.

1:57:08 - Jorge Lewis But did you fall in love with the coding or with the things that coding brings, which is doing, like, you can make things happen with code?

1:57:23 - Jonas Lindberg It's still making things happen, but it's got less visual.

1:57:27 - Jorge Lewis But like, I don't think, and maybe, maybe there's people, maybe like our team, and this is like, we need to figure this out. It's like, do they validate, like, are they looking at the code from a perspective of like, oh, look how, look how good this code is. I go from this to this instead of just like, oh, I have the output.

1:57:51 - Jorge Lewis I don't know if I explained that very well.

1:57:57 - Jonas Lindberg I remember when we were going over the fact that our client is the one that owns the code we write, that was quite the reaction out of one of our developers. Because he values the code, not the product. The code he wrote, that's his hard work. The product that comes out of it, that's their product. But the code he wrote, that's his code. That's his baby.

1:58:25 - Jorge Lewis Yeah, and for me, it's easy to say. For me, my hard work is the things I've learned through that project. From all the projects I've made, what I take most of it is the learning, because I can scratch whatever I've made, make it again, better, faster. And in the back of my head, maybe there'll always be that, oh, I wasted all that time making that previous version. But it's like, did you really? I don't know.

1:58:54 - Jorge Lewis But at least this new version, it's fast, it's better.

1:58:58 - Unidentified Speaker Yeah.

1:59:01 - Jonas Lindberg All right.

1:59:04 - Jorge Lewis So I think, was this just a, I don't know, we were going to watch this one.

1:59:09 - Jorge Lewis Here.

1:59:11 - Jorge Lewis Grandpa. It's time for grandpa.

1:59:15 - Jonas Lindberg Grandpa?

1:59:17 - Jorge Lewis With the most clickbait title.

1:59:19 - Jonas Lindberg Hey, yo, it's this guy, continues to deliver.

1:59:25 - Jonas Lindberg We all say that code is bad, this code is terrible.

1:59:30 - Speaker 2 But what does it mean? And what should we do about it? That's our topic for today.

1:59:43 - Jonas Lindberg Hi, I'm Dave Farley, Continuous Delivery, and welcome to CICD.

1:59:49 - Jonas Lindberg Mr. Who?

1:59:50 - Jonas Lindberg Mr. TDD. He is a huge advocate of learning test-driven development and using it consistently throughout your coding as the foundation of how you think. I see. So I'm quite excited to see his opinion. If you haven't been here before, please do hit subscribe.

2:00:12 - Jonas Lindberg I hope you enjoy the content.

2:00:16 - Speaker 2 Today hit like as well. Bad code is probably a bad name for bad code, but at least colloquially, if not technically, we all know what we mean when we say it. That is not how I would have done it. Or if it's our code, that's bad. It's not how I do it now with the benefit of hindsight, bad code is code.

2:00:36 - Jorge Lewis This is just totally irrelevant, but one thing that I, I don't know if it's a language barrier. But some naming conventions, or not conventions, the naming of things I've seen are just so bad.

2:00:55 - Jorge Lewis Like they represent nothing of what they should be.

2:01:00 - Jorge Lewis So just keep that in your mind.

2:01:04 - Jorge Lewis Is not how I would have done it. Or, if it's our code that's bad, it's not how I'd do it now, with the benefit of hindsight. Bad code is code that is difficult, or at least unpleasant, to work on. In this episode, I want to explore what bad code really is, what's a sensible practical definition for good code, and what it takes to build good code and avoid traps in bad code based on some real-world examples. Fundamentally, bad code is defined, I think, by two things. Either it doesn't do what it should, or even if it does do what it should, it's too hard to change it when we need to change it. I'd argue that that's it. Everything else is changed.

2:01:47 - Jorge Lewis So if we use these two constraints, then the code I wrote for REST would be bad code because it's hard to change.

2:01:59 - Jonas Lindberg I disagree. If you wrote it in two days, you can change it completely in two days.

2:02:06 - Jorge Lewis By remaking it, you mean? Yeah. Yeah.

2:02:12 - Jonas Lindberg And I think coding in a way that's easy to change would be more harmful because it would be structured in a worse way than the recreation would be. And it would take probably more than four days to create it in a very easy to change way.

2:02:27 - Jorge Lewis Yeah. So for us, these small components where it takes days or even a week or even a couple weeks, then remaking things make more sense. But for, something that where you quote, it's going to take a couple of weeks or months, then remaking it doesn't make any sense. Like you want to design it properly, but I guess like it's just a whole different ballpark. It's you're, you're either going to, you're either dealing with something that you've never done before and that's why you're making it fast or you're, you're dealing with something that is going to last a thousand years.

2:03:10 - Jonas Lindberg Like the two prongs of programming what you're making will either be disregarded within a month or it'll last for 20 years. There is no in between.

2:03:21 - Jonas Lindberg Change it when we need to change it. I'd argue that that's it. Everything else is secondary to those two things. If it does what it's meant to, and it's easy to change, then it's good code. This is not about engineering as art, or over-engineering, or software developers being over-precious about the beauty in their code. This is practical, pragmatic stuff. It works, and it's easy to...

2:03:54 - Jorge Lewis Does it remind you of Cohen?

2:03:58 - Jorge Lewis That one sentence, the past five seconds.

2:04:01 - Jorge Lewis rewind it this is practical pragmatic stuff it works and it's easy to change these things have a direct bottom line impact on the product I don't know just just like I feel like I've heard this definition for good code and what it takes to build good code and avoid traps in bad code based on some real-world example.

2:04:24 - Jonas Lindberg I think the reason why it resonates, like, reminds me of Kuen is because it's trying to be technical from a completely non-technical perspective. Yeah, it's like Because writing good code takes effort, but effort is the product of our work. I feel like I'm hearing nothing, it's producing nothing, and it's going out as nothing.

2:04:56 - Speaker 2 Argue that that's it. Everything else is secondary to those two things.

2:05:00 - Jorge Lewis That line right there, like, and that's it. Everything else is secondary. That line, like... Do these guys take the same adjusts, Chrome Master, Black Belt?

2:05:13 - Jonas Lindberg It's easy to change.

2:05:14 - Jonas Lindberg This is not so much the effects of something as hard to change.

2:05:23 - Jorge Lewis Like hard to change, bro. Make it a microservice. Like then you're, you technically have good code.

2:05:29 - Unidentified Speaker Hmm.

2:05:34 - Jorge Lewis Like if you make microservices, then it's easy. What was his two conditions?

2:05:39 - Jonas Lindberg It's like, if you remember from the end of the other video, that one said, like, you shouldn't like, if it's a microservice or a monolith, it doesn't matter. But microservices are quite inherently difficult because you have to, structure in a way where it can be a microservice. Like, you know, the, the, for us with a depth, just having our Python API and the other thing, imagine having like another Python API for every single function that can be done. Yeah. Just to make it so that it's easy to interchange.

2:06:21 - Jorge Lewis So I'm saying bad code is good for, for most people, for most projects. When do I want to change my code? Like when, in what scenario do I want to change my code?

2:06:36 - Jonas Lindberg Yeah. So, so I guess in with his definition, bad code is good because I want things to be like, I don't need, Because or it's assuming that making bad code is fast.

2:07:06 - Jorge Lewis Like that's what it's assuming because making things that are hard to change is fast. Like doesn't do its job. Like that just, that doesn't, that just, that's not even code.

2:07:18 - Jonas Lindberg Like code is, I mean, I think he's just using the term bad and going, yeah, but code that doesn't do its job. Of course that's bad.

2:07:29 - Jorge Lewis I think this is actually from the other video as well. There's three of them.

2:07:36 - Jorge Lewis There's three of them and he pointed out two of them. I can't remember.

2:07:50 - Speaker 2 I'd argue that that's it. Everything else is secondary to those two things. If it does what it's meant to and it's easy to change, then it's good code. This is not about engineering as art or over-engineering or software developers being over-precious about the beauty in their code. This is practical, pragmatic stuff. It works and it's easy to change. These things have a direct bottom line impact on the productivity as well as quality of the systems that we build. If you want to go quickly and build lots of features, you don't get to do that by cutting corners and writing bad code fast. You do it by working more carefully to create good code from the start. And so saving lots of unnecessary time and effort correcting the fallout that your bad code caused later on. I wish that more of us techies believed that and defended that idea more strongly to misguided people pressuring us to cut corners.

2:08:48 - Jonas Lindberg Can I make one comment here? Because cutting corners simply doesn't work.

2:08:54 - Jonas Lindberg So he's arguing that creating this bad code, this hard to change code, is something that will directly affect the bottom line, down the line, because it's something that will have to be changed. But I'd argue having to change it and it affecting the bottom line is a great sign of its success. If your codes that you've wrote that's hard to change is used so much that you have to rewrite it, that's a great piece of code. And it's great that you've got it out there.

2:09:38 - Jorge Lewis I can see your point.

2:09:45 - Jonas Lindberg When you have the funds to do a massive rewrite, which affects the bulk of this thing that was created before, that was created in a hard-to-change way, that's a good thing, not a bad thing. If you are in the position where you have to change old code, yeah, that's a good thing, not a bad thing.

2:10:17 - Jonas Lindberg Because that means you're in Dora data.

2:10:25 - Jorge Lewis Says that teams that produce higher quality code are significantly more efficient overall, spending 44% more of their time.

2:10:34 - Jorge Lewis I wonder where this came from That has to be enterprises.

2:10:42 - Jorge Lewis Yeah.

2:10:45 - Jorge Lewis And it's interesting because this guy, whoever he is, saying this, you have to understand his audience are people like Chinmay, Biwas, and just people that, like programmers. And a majority of them don't work at enterprises. They work at, if it's a medium company, then sure. But if they're either doing their own projects or they're doing, they're working at a startup or at an agency as a freelancer, then this just does not apply to them. If anything, it's the opposite.

2:11:21 - Jorge Lewis I'm producing new features than teams that don't. 44%, that's a big win. Quality matters for commercial reasons because we go faster overall and we create better.

2:11:36 - Jorge Lewis Actually, I don't, how does that?

2:11:39 - Jorge Lewis 44% their time.

2:11:42 - Jorge Lewis How does this work? Like, so it's saying...

2:11:49 - Jonas Lindberg High-performing organizations, so yeah, enterprises. Done 22% less time on unplanned work than reworked as a result.

2:11:56 - Unidentified Speaker Yeah.

2:12:00 - Jorge Lewis I feel like this data, this is...

2:12:04 - Jonas Lindberg I feel like this is someone that implemented agile with their 25 meetings per week. And the actual work that's being done, yeah, it's always on like the task they planned, but the time they took to plan it is probably like a 200% like that's hidden from this graph because here they're only considering unplanned work and planned work. Also, if they were planning the work, if they included one more for like how much time is spent planning the work, I'd love to see that.

2:12:37 - Jorge Lewis It's okay. So there's also the big thing I think is reworking. When you're reworking, you're forgetting that it provided so much, it provided value like with, Like you're reworking it because it provided value, like going off your point. If it didn't provide value, we wouldn't be reworking it. But if it was perfect, so what would be the downside of making it perfect? Is you would risk spending time, well.

2:13:07 - Jonas Lindberg You only know what perfect is in the scenario where you have to rework it. That's when you have enough context to like properly do it.

2:13:15 - Unidentified Speaker Perfect.

2:13:17 - Jorge Lewis And that's when you're making things that have been done before. So, but like, that's when you're making things that have been done before and you have reference to that. So you're in an enterprise where you can refer to a bug that took 20 hours of somebody else's time to solve. And you can just look at their log, like their log that they took eight hours to make. But if you're in a startup looking at a stack overflow that someone spent two minutes writing, that's not going to help you make a perfect solution.

2:13:54 - Jorge Lewis So it's very applicable. Reworks are kind of necessary in smaller, in anything but enterprise or at least in anything innovative because you will not have, like whatever you're making has not been done to the T before. If it has then what are you doing? Then you're doing something like error handling which you should learn Right Yeah, like I mean if Okay, for example when for us we're storing our messages our AI messages on a database instead of caching them on a writer server or whatever If whatever we are making right now, this chatbot, this adapt, or this chatbot that relies heavily on long-term data where the time of day matters a lot, the number of sessions per day matters a lot, and et cetera, then we would just implement their solution. And we'd have kind of a perfect solution because they iterated on it so many times before.

2:15:03 - Jorge Lewis I'd say every case, that's not the case. You're either using a different stack, you have one feature that's different that affects the rest of it. So rework is almost always necessary at anything but enterprise level. At medium scale businesses, even there, even enterprise businesses, at most points you've reworked.

2:15:34 - Jorge Lewis like when you don't rework we're talking about like UI and like frontend and and like I don't know maybe I don't know what I'm talking about I'm producing new features than teams that don't 44%, that's a big win.

2:15:51 - Speaker 2 Quality matters for commercial reasons because we go faster overall and we create better quality code. So as software professionals, we have a professional duty of care to do a good job. This is not about self-indulgence or over-engineering. This is what we are paid to do, our professional duty of care to build software as efficiently as we can.

2:16:15 - Jorge Lewis To do that, we need So this was relying on the assumption that if you make better code, it'll save time in the long run, which is not the case for us.

2:16:26 - Jonas Lindberg Yeah. I kind of disagree with that. Like fundamentally coming back to my point, like if I, like if my employee wrote a piece of code that was so important that we have to rework it, that's great.

2:16:44 - Jonas Lindberg If that costs us time down the line, that means it made us enough money to where we're spending money on fixing it and making it better.

2:16:55 - Jorge Lewis Yeah. Like if REST didn't bring the value that it did, I wouldn't be working on it right now.

2:17:02 - Jonas Lindberg Yeah. I don't want an employee to spend more time than they have to on a piece of code, which could be from the trash or could be over optimized in some way. I want them to focus on the core value. Just implement that. Don't make it scalable. Don't make it clean. Don't make it in a way where we can improve on it. Just make it. If it works great, then we invest in it.

2:17:25 - Jorge Lewis And it's like for me, so, and also I think it's more enjoyable making things from again, rather than improving your, like Rather than improving something that was structured before you knew the end goal.

2:17:42 - Jonas Lindberg Or before you knew what it looked like in practice more accurately.

2:17:47 - Jorge Lewis Yeah.

2:17:49 - Jorge Lewis Need to build high quality software, not create crap quickly. Because if we optimize to build...

2:17:55 - Jorge Lewis I like crap quickly.

2:17:57 - Unidentified Speaker Yeah.

2:17:58 - Jonas Lindberg If it's working crap, that's so valuable, I need to rework it.

2:18:04 - Jorge Lewis If you make working crap, you're a good programmer. I think that's the title. If you make working crap, that you're a good programmer. A good programmer is someone that does the best for their time.

2:18:22 - Jorge Lewis Let me pause there and say thank you to everyone.

2:18:25 - Jorge Lewis I'm going to start saying that to everybody.

2:18:30 - Jonas Lindberg Not working, valuable. If you make crap so valuable, we have to rework it. That's it.

2:18:41 - Jorge Lewis But when you're saying valuable, it's so ambiguous. Working, it's more clear. Cause it's like, what does working mean? And this relies on them understanding what is the, like, what do we need from this whole system?

2:18:55 - Jonas Lindberg But you get what I'm saying?

2:18:58 - Jorge Lewis Yeah. Like we need, we don't, we don't need anything good.

2:19:02 - Jonas Lindberg We are extreme. You start the routine. I support void it. Here is chat. GPTs take on defining bad code. It's not perfect, but it's also not a bad summary either. So if bad code is hard to maintain.

2:19:22 - Jorge Lewis It's it's just these buckets are just.

2:19:28 - Jorge Lewis Like who made these buckets? Or who made who? Why is this unscalable code bad? It's not because like,

2:19:39 - Jonas Lindberg I mean, I'd agree with these, that these are the ones that are generally considered bad code though. What do you think about the security? Like if, if one of our employees coded something that like used, for example, server authenticated code on the front end, which just is impossible to use in production, but it's working and doing kind of the things it's supposed to. What do you think then?

2:20:11 - Jonas Lindberg Because it's very easy to speed up development of features by ignoring authentication as an example, by ignoring row-level security, by ignoring all those things.

2:20:29 - Jonas Lindberg That lets you ship a lot faster, or that lets you get to a point where the application is working and the ship will stay much faster. But it will be very insecure.

2:20:42 - Jonas Lindberg So you'll have to fix that before shipping to production.

2:20:57 - Jonas Lindberg Then clearly it isn't easy to change. If it has scalability issues, then it doesn't really work as it's meant to. And all of these other things also fall into my two categories of doing what it's meant to, and then being easy to change.

2:21:13 - Jonas Lindberg Which I think are the simple and more foundational...

2:21:18 - Jorge Lewis Yeah, like a lot of these... He's, he's, I feel like at this, this is the point of the video where experience doesn't do its job.

2:21:28 - Jonas Lindberg If it, like, if I need a feature, which is innovative, a feature, which hasn't been made before, and you make it work with like HTML, no CSS looks, I don't care. You made the feature work. We can improve upon it then. Like we know it works. We know it's valuable. We can improve upon it.

2:21:48 - Jonas Lindberg It's not, not doing its job.

2:21:53 - Jorge Lewis How about this? This whole title is wrong because what your code looks like has no correlation to how good a programmer you are.

2:22:06 - Jonas Lindberg I'd argue somewhat it does, because a lot of what dictates how your code looks like, it's just how much you know about the language. But at a certain point, it doesn't matter anymore. Like, do you know how to error handle? Yes, then it'll look better. No, then it'll look worse. And it'll dictate if you're good. But it's not the thing that dictates if you're good. It's just an indicator of experience for yourself.

2:22:32 - Jorge Lewis Yeah, like a good programmer knows error handling in general. A good programmer knows typing in general. So.

2:22:51 - Jorge Lewis Okay, for.

2:22:54 - Jorge Lewis You know, for example, like, Like so. Take REST as an example. I just got into Lanchain at that time and just got into, that was my first personal project for Install Kit. The code was terrible, but I would still say at that point I was a good programmer.

2:23:22 - Jorge Lewis My code looked like I was a first time TypeScript developer, but if you took someone that has been developing for 50 years, They could see the patterns of, oh, this guy understood this principle of this and this. So, yeah, I didn't do proper typing. I used any. I didn't use nulls. I used question marks. I didn't even try catches, though. Sorry, B-West.

2:23:53 - Jonas Lindberg This is a nitpick, but I disagree with the typing. I think that's just inexperienced with the language because no matter what I'm doing, I can do the typing properly because now I understand TypeScript typing so well that I can just like, I can get the LSP to tell me what I need to type like in two seconds. And then I type it and it makes me work faster because the intellisense helps me.

2:24:18 - Jorge Lewis But, but this, this, this statement saying if your code, is using any, you're a bad programmer. I wouldn't say I was a bad programmer, but I was using any.

2:24:28 - Jonas Lindberg I think it just indicates your experience with the specific programming language more so than if you're a good programmer or not.

2:24:38 - Jorge Lewis And it also depends at what experience level, how long you've been doing that, and if you're still doing the same things that you were doing a year ago. Like I stopped using any after that one project because I learned it since then. So it's like, for example, if you're using try and catch, if no one tells you to learn error handling, you will always use try and catch.

2:25:00 - Jonas Lindberg And more useful ideas. Fundamentally good code needs.

2:25:04 - Jonas Lindberg Oh, sorry. Go ahead.

2:25:05 - Jorge Lewis It just comes back to the point of how your experience affects the statement. Like if you're a junior engineer, I would say that. The code you make, if we make the same code as a junior and a senior, it's a whole different world. Because as a senior, I understand the principles going on behind everything. I'm trying catching so I can save this five minutes so that I can just see my output. You're trying catching because you don't know how to air handle. Or you don't know that there is air handling.

2:25:45 - Jorge Lewis At some point you want to learn things and to make your code better. You could say like error handling and using classes when you should and that just comes with experience. I'd argue against that one.

2:25:59 - Jonas Lindberg The using classes when you should, when to use classes over time. Functions and state and sub-stores, for example. I think that's just all opinion pieces. It's all going to be opinion pieces.

2:26:11 - Jorge Lewis No, that's what I just said. It's experience. You gain an intuitive feeling of, oh, I want to use a class here. Why? It feels better.

2:26:22 - Jonas Lindberg Maybe, but I think the arrow hunting is more set in stone. But the classes, I think it's almost going to be like, it'll flip back and forth depending on experience. You just start out, you don't even know classes or anything. You learn about classes, classes are great, always use classes. You learn when to use them, okay, never use classes. Then you learn object-oriented programming, use classes. Then you learn, oh, functional programming is a thing, never use classes. Then you just flip that. Error handling is like, when you learn it, now I can do it.

2:27:02 - Jorge Lewis Yeah, and then you always do it. Or at least you do it better every time. For me, the first time I did error handling, The first time I did error handling, I just checked if error. And then as I went on, I was like, okay, if error or if no data, okay, if error, then do this, like you just learn over time. Um, but like, for example, the, for the point of like, where things are just ambiguous, like when should I use a class? One of our team members working on, on, um, on a simulation feature, he was like, he used a recursive function over a for loop. So I asked him, we pseudocoded a for loop, why have you changed it to a recursive function? And he was like, hmm, we could do both. We could do a for loop. And I was like, yeah, we could. Why do you use a recursive function? He couldn't really come to an answer.

2:27:58 - Jorge Lewis In the actual scenario, I would say they're about even in terms of pros and cons. But it's just a matter of me, I would use a for loop. And I would say I'm more experienced than him. So you could say the better answer is a for loop. But at that point, I'm not helping him by saying you should use a for loop. I'm just saying, OK, cool. Why did you use a recursive function instead? And then he's trying to think it through for himself. And then I'm like, OK, cool. The next time he's working on something similar, he'll think again, oh Jorge asked me that one time, should I be using a recursive function or for loop?

2:28:34 - Jonas Lindberg I'm going to be honest, I've never ever made a recursive function outside of what's a recursive function.

2:28:44 - Unidentified Speaker I haven't either.

2:28:57 - Jonas Lindberg I've never made a recursive function like that. I think you can just achieve the same thing with a for loop and being smart about the flow state.

2:29:08 - Jorge Lewis But you see, he's done these code questions, so he was thinking recursive function, binary tree, binomal ethereal.

2:29:17 - Jonas Lindberg The thing is, if he used that because that was a solution he had in his head, great. But if he used a recursive function over a for loop, which he would have done better, if that's the scenario, then it's kind of bad. But I'm guessing just because he does those code questions and that, the recursive function was just natural to him.

2:29:44 - Jorge Lewis And just as long as I prompt the question in his head, Because what's default to him is the recursive functions. But we should be promoting the critical thinking where should I be doing this or this? That's all we have to do. We can let him do the rest. And that's like classes. Should I be using a class or should I not?

2:30:03 - Jonas Lindberg Play devil's advocate there. That's not where critical thinking matters. That's where like, if I, if I like, that's the reason I've never used recursive functions because like, to me, it's always using a recursive function. The only purpose would be to make it fancier, to make it prettier because I can achieve everything I need to with for loops. And those were great. I've never needed recursive functions. I've tried them out.

2:30:34 - Jorge Lewis like there hasn't been scenarios where Yeah, how no we've had to have made a recursive function, but just not realize like we've had to know we've we've had like We just I don't want to think that I've made a

2:30:54 - Jonas Lindberg recursive function once and it was in a recursive function tutorial and You see where I'm coming from, like, I don't know if that's where we need to promote critical thinking because then they'll be hung up and should I use a for loop here or a poster function? Well, you should just use what's natural. Like it doesn't matter.

2:31:15 - Jorge Lewis They do that. That thought process will become natural at a point where it's like, should I make a class or not? Um, yeah. And there's, Sometimes it's conscious, sometimes it's subconscious, where you have reasons, you're like, okay, I've reused this thing three times and I want to make it on property, I want to add a function to it.

2:31:37 - Jonas Lindberg I think for that kind of question, what it really comes down to is which will be easiest to implement, which do I think will be the best one to work with in the future, and which one do I want to learn more about. For me, If I want to use the class in TypeScript, I know I'm going to be slower. I don't know if it's going to be easier to work with in the future. So it's likely going to be because I wanted to learn how to use classes more.

2:32:06 - Jorge Lewis You know, I've never made, I've made like probably one class in TypeScript.

2:32:10 - Jonas Lindberg Yeah. It's like, you don't need them.

2:32:13 - Jonas Lindberg You don't really need passes at all, you just need objects.

2:32:19 - Jonas Lindberg Objects and then you just hammer out the object until it's in the correct form. You don't need to attach the functions to the object. Like, yeah, that's the whole thing with functional programming. Oh yeah, we've got a lot left of the video.

2:32:33 - Jorge Lewis The next one is big premature optimization. Oh.

2:32:40 - Jorge Lewis Everything else is just a special case of those two things. It's possible that I'm being a little bit overly reductive here, but in this case, I don't really think so, because I can make my code scalable or write it to eliminate security vulnerabilities, and it still might be bad code if it's hard to maintain or offers a poor user experience. So if you fix all of these things, is the code good now? Well, maybe, maybe not. To achieve good code, our code needs to fix all of these.

2:33:11 - Jorge Lewis I don't know how true this is, but it's just a thought. How do you know what is maintainable? That's like, we're talking about the future. How do you know the future? Like if we're talking about a, like you just don't like, or at least in all of my experiences, like for rest, there would be no way.

2:33:30 - Jonas Lindberg Or I think there are tools which objectively keep things more maintainable.

2:33:39 - Jonas Lindberg Yeah, like for example using...

2:33:40 - Jonas Lindberg Code localized to where it's used. Like instead of using a utils.ts folder where you dump every single function, keep the functions where they're used. That just makes it more maintainable.

2:33:53 - Jorge Lewis Yeah, like also using JSON in a database versus its own columns. Like these small things, but it's...

2:34:04 - Jorge Lewis It's a very small example where it's just something we learn over time. Like if you see someone using a utils function and putting it in its own file, you'd tell them, hey, you're using this twice. Just, I don't know, just kind of put it in the code maybe.

2:34:21 - Jonas Lindberg Yeah, I think those things like Making that bad code into good code isn't more effort though. It's just I have more experience now. The effort was learning.

2:34:36 - Jorge Lewis It's all just coming down to experience. Good code, there's no good code or bad code. It's just experienced, like experienced and not experienced.

2:34:50 - Jonas Lindberg I think that's the realization we're coming to.

2:34:53 - Jonas Lindberg It's not that ugly code is good code or beautiful code is good code. It's just, it'll be what you're most experienced with. Like if we told B was to make the most beautiful codes, it wouldn't even be close to what our bad code is, if that makes sense. It's hard to pinpoint the statement, you know.

2:35:18 - Jorge Lewis It's I feel like we could make a can we be able to concisely summarize what we have now into probably like three different rules where it's like, okay, yeah, it needs to accomplish the task. But it relies on, like it just there's something we have something here now we have we have like an idea that we're trying to get to which is it all comes down to your experience and it's just there's we've discussed a lot of good things and we just now need to figure out a way to articulate and that's always the hardest part these things, and depending on the context, probably several more not listed here.

2:36:00 - Jonas Lindberg If uptime matters a lot to my business, I was asking the same thing.

2:36:12 - Jonas Lindberg If you get one week to do something, and you make it one time each day, compared to if you're trying to make the perfect thing over the whole week, which will give the best outcome.

2:36:24 - Jorge Lewis Yeah, and I was thinking of like could we try the experiment with like our developers to we should we tell them spend three hours Making one code and do that three times versus making one project like we have has nine chin may be west nazif And me five developers. Let's say three make three of them spend one full day making a project and then two of them make three small projects, and then at the end of it, ask them to make a new project. Just the similar study that they did, but with code. I wonder how that would do. But we'd have to do it, it'd have to be in something totally new, like a new language, a new everything, so that everyone is, so that I could obviously, we need to do it at scale probably. Maybe we could try that study out sometime, as just a fun, interesting thing. Cause it's, it's something like that can prove a good point.

2:37:25 - Jonas Lindberg The thing about it is. If you did the like projects just quickly once you wouldn't learn error handling, you wouldn't learn type handling. You'd just use any across all of them because you're doing free quick projects. You don't have time to go.

2:37:40 - Jorge Lewis So, like I said earlier, when did I learn that?

2:37:43 - Jonas Lindberg Because I've always, I've always seen the vector inside of ourselves, which kind of just goes, Hey, this is something that was a good time.

2:37:51 - Jonas Lindberg Yeah.

2:37:55 - Jorge Lewis Hey, Junduz has nagged me enough about this. Maybe I should learn this.

2:38:05 - Jonas Lindberg But yeah, like what made me nag to you about using any and not nag to you about your horrible file structures, for example?

2:38:20 - Jonas Lindberg Like, I was trying to pick something that I haven't even gone into. Like, when I look at your code, I just immediately go, bruh, Annie, bruh, horrible error handling. I don't care what the code does. These two things can be improved.

2:38:40 - Jorge Lewis Is it also when I experience the problem of that bad code, like when I'm not logging, typing an error, do I experience the problem that is solved by typing things? That I'm like, oh, typing would solve this.

2:39:03 - Jorge Lewis When did I realize types were good? Because before this, before TypeScript, I was, I didn't like types. I liked my Python dynamic types. I was like, huh, statically typed types. Come on.

2:39:17 - Jonas Lindberg Why would I not want to make my industry when you type like a profile dot and then the whole list of things that could be. Yeah.

2:39:27 - Jonas Lindberg Yeah.

2:39:27 - Unidentified Speaker So.

2:39:29 - Jorge Lewis Because now I can very clearly explain to someone why I use TypeScript and not, or why I use types and not use types. But it's, I think it's just from experience, but it's, there has to be something that I can say where it's like, because this, so I started using types, like, because I've seen this error. So I started using types, but I don't think there is like, so this is where you tried it out and you liked it.

2:39:54 - Unidentified Speaker Okay.

2:39:56 - Jorge Lewis Yeah. So this is where it'd be helpful. Just documenting where you just really get to understand what happened in the thought process. So like with starting business, if I wanted to do another one, I would not be able to understand why we, and I learned this thing without documenting it through the process. Like I right now understand why I use types, but I don't understand how I got here.

2:40:26 - Jorge Lewis Anyways, let's, it's already 3am.

2:40:29 - Jorge Lewis Resilience may be a much more important defining characteristic.

2:40:33 - Jonas Lindberg Yeah, I think so. Going over the, there's quite a lot left to go over. If we want to, yeah, if we want to go into like proper conversations, like we have been instead of just speed running the rest, I think it's best with a part two.

2:40:52 - Jorge Lewis Maybe we've discussed enough so that I can write a script.

2:40:58 - Jorge Lewis It's never going to be perfect. My video that I'm going to publish tomorrow night, I am by no means proud, if anything but

2:41:09 - Jorge Lewis of my video I made on Monday and edited it since a couple of days ago. Shots are way overexposed. The frame rates aren't matching.

2:41:26 - Jorge Lewis The audio is so terrible. But it's not a matter of making that perfect. It's just I'm going to publish that and publish the next one better than that. So with this video, and I don't know if you've realized this yet, but when you watch your YouTubers, you don't remember their first video. You remember what you're watching now. Um, like your first videos, no one will remember, like your friends and people will remember because like, Oh, you know, or how do I explain it? So I don't want to share this video I'm going to make with my, my friends from high school because they're going to be like, Oh wow, this guy sucks. You know? And At some point, they're not my audience anyways, but at some point, my real audience is never going to see my first few videos. The real people that are going to be watching me every day.

2:42:17 - Jonas Lindberg But I think it's important for yourself to upload it still, because then when you publish your next video, who you should be comparing yourself to is yourself.

2:42:25 - Jorge Lewis Is that previous video.

2:42:26 - Jonas Lindberg Exactly. You shouldn't be comparing yourself to other videos.

2:42:30 - Jorge Lewis I take it down when I post a better one.

2:42:33 - Jonas Lindberg Don't even take it down, just keep it working up and be able to compare to yourself in the past rather than comparing yourself to other YouTubers.

2:42:40 - Jorge Lewis Well, I mean, just in terms of like more technically, you probably want to archive it or at least private it because just it represents your image.

2:42:50 - Unidentified Speaker Yeah.

2:42:53 - Jonas Lindberg Also being able to show yourself improve over time is good though.

2:42:59 - Jorge Lewis I think that's done other ways. I don't know. But who cares?

2:43:02 - Jonas Lindberg So no one's going to look back at your old ones.

2:43:11 - Jorge Lewis So the only person that's going to notice how you improved over time is your long-term fans, which if they're long-term fans, you don't, they don't need the other, the older videos published and yourself and yourself.

2:43:23 - Jonas Lindberg People that go, Hmm, I wonder how this guy was in his beginning. And then they can be like, amazing. Like, wow, he, he, he came from this, but what's the term glow up.

2:43:40 - Jorge Lewis He glowed up.

2:43:47 - Jorge Lewis At the cost of sacrificing your professional or your high quality image though.

2:43:54 - Jonas Lindberg Does it? I wouldn't see that as a negative.

2:44:02 - Jorge Lewis That's interesting, yeah. Like for example one person that I watch when like every video he posts is this guy called Daniel Dallin Which I realized His the person managing his social media like his whole thing Is a person that I watched like for a long long time, and it's this guy. He's like 17 years old He's been doing social media for like a long time And I was like there's no way like it just feels like it's so weird that type of circle But anyways, I need to meet this guy by the way. Let me send you this video or his channel. He lives in Hong Kong And he's the fastest growing entrepreneur right now on YouTube.

2:44:37 - Unidentified Speaker Wow.

2:44:37 - Jorge Lewis He's about to reach a hundred K.

2:44:39 - Jonas Lindberg How do you measure that?

2:44:42 - Jorge Lewis Um, well it's very obvious.

2:44:47 - Jorge Lewis He's like his, his, his iconic, um, or, or his thumbnail is iconic. His POV thumbnail.

2:45:01 - Jorge Lewis You might have seen it actually around. Yeah, like where he just puts the letters POV in white on his thumbnails. And everyone has been using it.

2:45:13 - Jonas Lindberg Yeah.

2:45:16 - Jonas Lindberg Yeah, he lives in Stockholm.

2:45:19 - Jonas Lindberg Are we doing part two later?

2:45:25 - Jorge Lewis Part two, if necessary. I'm gonna... See what I can write from all we have here.

2:45:32 - Jonas Lindberg Yeah, we can do like make little, yeah, if you're interested in watching the next of this guy's video, links in the description.

2:45:44 - Jonas Lindberg Since we ain't finishing it today.

2:45:48 - Jorge Lewis Yeah. So I'm gonna see what I can, I can muster up in a script. If I can explain, I hate making these videos because I want to make it so perfect that I don't want anything to be wrong. Like I don't want to be like, But it's just like things you have to publish.

2:46:05 - Jonas Lindberg It's painfully close to what we've been discussing today. Like the bad code versus good code. You just gotta do it like many times and then that'll be more valuable than doing it once.

2:46:19 - Jorge Lewis But perfect. Yeah. Like I can republish, I can remake this video and the third time it'll take me three hours to make rather than 20. That's an exaggeration, but like, because I understand the point of view, like the script's already going to be there. I'm just going to refine it and I'm just going to edit this. I I'm going to, I'm not doing the editing myself, but anyways.

2:46:42 - Jorge Lewis Yeah.

2:46:44 - Jorge Lewis Yeah. Okay. Yeah. A little B was yeah.

2:46:49 - Unidentified Speaker Yeah. Yeah...

2:46:53 - Jorge Lewis Is anyone on? Will's been on the whole day today, by the way. Oh, okay. Yeah. Been nice. And I got two updates from him today. That's the most I've ever gotten. Ever.

2:47:08 - Jonas Lindberg Did you have a talk with him?

2:47:10 - Jorge Lewis Uh, no.

2:47:12 - Jonas Lindberg No? No?

2:47:13 - Unidentified Speaker Okay.

2:47:15 - Jorge Lewis To do... He added me, but he didn't add me.

2:47:21 - Jorge Lewis Yeah, he did at Jorge, but it wasn't like my profile.

2:47:29 - Jonas Lindberg I guess that's it then. Better get going to sleep.

2:47:36 - Jorge Lewis I've been having some crazy dips between, you'll see this in my video tomorrow, I talked about it, between five and seven, which is the time I work out. So I've started doing, which I mean, I have been trying to do this and you probably know from the start, getting back to Hong Kong, I don't want to be waking up as like at 12. I want to be waking up at least at 10. That's already late. Normal people wake up around 8. Exactly. 10 is already like bruh.

2:48:20 - Jorge Lewis And it's not only what's the social stigma, but it's like the actual physical things, like your body is already shaking.

2:48:30 - Jonas Lindberg I have to get up at 5.30am to Tuesday.

2:48:37 - Jorge Lewis For what?

2:48:39 - Jonas Lindberg I have to go to the DLT and get my printed license. The driver's license. I've only got like temporary papers at the moment.

2:48:51 - Jorge Lewis I got a thumbs up from the Huberman. You know Huberman? Andrew Huberman?

2:48:57 - Jorge Lewis No.

2:48:58 - Jorge Lewis Nay.

2:49:03 - Jonas Lindberg Baddest names. It'll be nice to have first driver's license though, in hand. Card I can travel with too. Like I can travel in hand now without passport or everything. Just driver's license.

2:49:20 - Jonas Lindberg Interesting.

2:49:20 - Unidentified Speaker Yeah.

2:49:23 - Jonas Lindberg It's like a full on like Thai passport basically or passport just for Thailand.

2:49:31 - Jorge Lewis That's the Andromeda I sent you in your PM.

2:49:34 - Jonas Lindberg I see. The Guardian says wellness bro, which is like the people I, I avoid. So yeah.

2:49:41 - Jorge Lewis No, he, he is the only wellness bro I will listen to. Oh my mama.

2:49:48 - Jorge Lewis This guy's a, he's a goat. I mean, you know, Lex Freeman, right?

2:49:58 - Jonas Lindberg No.

2:50:00 - Jorge Lewis Oh, bro.

2:50:01 - Jonas Lindberg Oh, yeah, I do. I got it in three years.

2:50:05 - Jorge Lewis Yeah, man, this this Andrew human is like the he has this podcast of relating to health. I watched like three episodes back like a few years ago. I'm just not a big podcast guy. I don't know.

2:50:22 - Jorge Lewis But yeah, his content is great. But anyways, I watched a summary video made by this third party dude. And it was, he said, at least sleep well for 80% of your nights. And for the rest of the nights, at least have a good reason.

2:50:39 - Jorge Lewis Because before, I would stress so much about getting my sleep every single night that it would make my sleep actually worse. And it would make me just like not... Live happily. So now that he said at least 80% of your life, I can spend one night a week with bad sleep and at least I'll be okay.

2:50:58 - Jonas Lindberg Maybe, but it's like, if you listen to the doctors, they say, like, one hour miss takes, or what is it? Yeah, one hour miss takes seven days to get back. He is the doctor.

2:51:11 - Jorge Lewis He's the, one of the leading guys on the whole, well, besides Matthew Walker, on like the whole sleep thing.

2:51:20 - Jonas Lindberg Okay.

2:51:26 - Jonas Lindberg So are you supposed to wake up at the same time the next day just for less hours or? I don't know.

2:51:33 - Jorge Lewis I think it's just the most realistic thing to do. Like not stress. Like 80% one day a week is pretty realistic. Like that's like, Oh, you're going out with your friends or you're just, that's pretty realistic. Like one day you have, you sleep two hours later. I don't know. Just.

2:51:52 - Jonas Lindberg I'd like to know if I should wake up the same time or if I should wake up two hours later.

2:51:59 - Jorge Lewis That's what I've wondered. So tonight, should I wake up later and then the next day you you Like, the normal time? Or should I wake up at the same time and cut the sleep?

2:52:12 - Jorge Lewis Like, which one's better?

2:52:13 - Jonas Lindberg Yeah, because I've always heard that you should always wake up at the same time when you go to bed, can vary, but always wake up at the same time. That's what I've heard. Your like mind clock singles in on that time no matter when you go to sleep your mind will just wake you up at the correct time and that's how you're supposed to work.

2:52:34 - Jorge Lewis I'll send you the video I watched it was like a very concise I think it was four minute or I mean I put on what speed but it was just yeah the wake-up time is the most important but I have another question is Does your wake up time also depend on like a 90 minute cycle? Like, can I move it around within maybe not 90 minutes? I think, I don't think so, but like 20 minutes, like a 30 minutes.

2:52:57 - Jonas Lindberg It is the 90-minute cycle, but from my experience, before I was obsessed about the 90-minute cycle, I always changed my alarm to match with when I went to sleep plus 30 minutes. But what I realized was that when I set my alarm to the same time every morning, no matter what part of the cycle I'm in, my body just goes, well, that's it. I wake up consistently like 20 minutes before my alarm.

2:53:25 - Jorge Lewis I'll send you the video I watched. It has a good explanation. Each of your cells has its own timer. It's interesting. I want to I mean, I'll probably end up waking up later than usual. But just so you know, for most days, I probably want to be waking up at least at 10. I want to see with Chinmay if we can schedule times throughout the day to catch up so I can wake up at maybe nine.

2:53:46 - Unidentified Speaker But yeah.

2:53:49 - Jonas Lindberg By the way, what do you think about when your body just naturally wakes up consistently, like 15, 20 minutes before you're alone?

2:53:55 - Jorge Lewis I haven't gotten, some days I, I usually never wake up before my alarm or if I do, I force myself back to sleep. But since I've gotten back to Hong Kong, I've done that like a couple of times and that's like super shocking to me. I'm like, wait a minute, what? Like I just, I just, I woke up and I felt rested and I was like, wait, what time is it? Yeah, I'm 30 minutes before. All right, let's just start the day. Usually I'm like, no, I need my sleep. And I go back to sleep. Like, but it's just, Yeah. See, that's the problem where I get where it's just like, I need, I need the sleep. And then you, you just.

2:54:36 - Jonas Lindberg I've heard of it. Like when you, when you wake up and it's like less than an hour before your alarm, you should just get up because it's. Yeah.

2:54:46 - Jorge Lewis But I don't have my alarm or my phone next to my, or a clock next to my bed. So I have to wake up to stand up and that's already got me woken up. So I usually just, if I wake up before, I'm like, no, it's not time. Go back to sleep. I should probably fix that. Bro, I can't wait for my optic fiber. A thousand megabits per second. Inshallah. I could go to 2,500. You're like about to maybe move out the second you get there.

2:55:24 - Jorge Lewis I mean, I could stay here for as long as I want, I think. So, well, maybe not as long as I want, but at least for a little bit. Like, even if your parents leave?

2:55:32 - Jonas Lindberg You just keep the house warm?

2:55:33 - Jorge Lewis Like, they'd probably let me stay here for like a month. And then they'd be like, okay, we need to start pulling some rent from it.

2:55:42 - Jorge Lewis But even then, the next two weeks, or like, they're going to decide, I think, in two weeks. So I'll have like a month, if they're going to be here for a month. So I'll have at least a month of just, a gigabyte per second speed. Oh man.

2:55:57 - Jonas Lindberg It's never truly one gigabyte. It's like slightly lower always.

2:56:02 - Jorge Lewis Yeah. But like comparing that to my 20 megabits per second download and my 0.5 megabits upload. I felt like that.

2:56:14 - Jonas Lindberg This is so bad in Hong Kong.

2:56:16 - Jorge Lewis It's no, it's cause I'm using 5g and it's like, We're just, we're, we have trees next to me. So it's like, it's not like it's reaching anything.

2:56:24 - Jonas Lindberg Yeah, but how is there no fiber in the whole thing? Like your pipe looks like Thailand, right? Like, or it looks like Southeast Asia.

2:56:32 - Jorge Lewis It does. The optic fiber is running through the the telephone poles and it just took them so long to do it because They were just lazy like the company was just lazy. They were like Seeds because it's their their offices aren't where we are. So they have to send someone out and do it But now enough people called them saying hey, we need optic fiber. We need cable. Oh So now our entire village, if you pay attention, there's cables running everywhere and it looks so bad if you notice.

2:57:07 - Jonas Lindberg It's the same thing here in Thailand. There's all like thousands of cables.

2:57:14 - Jorge Lewis But those are power cables. Isn't that even uglier? That's worse, that's worse.

2:57:22 - Jorge Lewis But I guess Thailand is like the third world, so Hong Kong is one of the richest cities in the world.

2:57:30 - Jonas Lindberg Is your village, like, does it even compare to how rich the actual city is?

2:57:36 - Jorge Lewis The real estate, no. The people, yes. Because it's the most quiet area. Where do rich retired people want to go? Not the city.

2:57:49 - Jonas Lindberg Fair enough. But the real estate, how's it?

2:57:52 - Unidentified Speaker Cheap?

2:57:54 - Jorge Lewis Um, it's about like 1.2 per house mill. And then like, uh, 4,500 month rent for our house. That's what we'd be listing it at.

2:58:10 - Jonas Lindberg That's 4,000. Okay.

2:58:11 - Jorge Lewis I heard 450 when I was like, Look what I got got my little I actually got all my equipment sent from Amazon a couple days ago got my light Just charging now this tripod. It's a beast What else that's it?

2:58:34 - Jonas Lindberg Why would you want it to bend that much? Like I feel like from tripod, I'd want it to not bend that much so that I know it's like correct. Does that make sense? If it bends that much, I'm relying on my, me, myself getting it level.

2:58:50 - Jorge Lewis So, so for example, if I want to hook it up on those bars up here, I can like wrap it around and then get a nice aerial view. Or if I want to hook it up to my monitor up top, like I just literally just bang.

2:59:07 - Jonas Lindberg It's just up, you can like hook it.

2:59:09 - Jorge Lewis That's the benefit. Yeah. Like, like it's just there already, like done. And then I can fine tune it on my phone. I have the grid lines and like the, what do you call it? Like the things that tell me if it's aligned or not.

2:59:25 - Jorge Lewis But like it's just it's just and and I can use it as like a stick as well or what do you call it? Selfie stick just bang I Do have normal tripods as well. I've got the full-size one here These are all from like before by the way, they're just sitting in the house and I have this from Antopia this trusty boy I Think that one's made its debut already a couple of times on my channel I But this thing I'm in love like it's just I slot my phone in and then although I'm this was a bad idea. My phone has MagSafe which it's a magnet so it sticks instead of this annoying thing where I have to put it in.

3:00:07 - Jorge Lewis Anyways.

3:00:10 - Jonas Lindberg Yeah. Guess that's it though. Gotta get out of this thing.

3:00:14 - Jorge Lewis Yes sir. Our whole team is going to be on tomorrow and we're going to be like helping out like three in the afternoon. Hey good morning guys.

3:00:23 - Jonas Lindberg Hey, it ain't too late for me. I'm like, gonna be an hour late to sleep.

3:00:29 - Jorge Lewis Yeah, I'm already too...

3:00:31 - Jonas Lindberg probably gonna be. If we think about it in UTC though, we both should be waking up around the same time. Because we're going to sleep at the same time.

3:00:46 - Jorge Lewis Oh, wow.

3:00:49 - Jorge Lewis Look at the white balancing it does on my face.

3:00:52 - Unidentified Speaker Okay.

3:00:54 - Jonas Lindberg Oh, wow. Yeah, you just got more information.

3:00:58 - Jorge Lewis Wow, that's very impressive. I'm learning all about this thing on my phone. I've got the Blackmagic cam app.

3:01:07 - Jorge Lewis Man, this camera, I'm just... Every time I think about that this was worth $1,300, I'm like, wow. But then I realized how much value I've gotten out of it with just work and everything. It's like, yes, that's worth it. And soon, in a month or two, they'll release their AI features, and I'll be able to use them on this phone. All right, let's go get our PC. I'll see you later. Thanks for your time. See you later. Bye. Bye-bye.